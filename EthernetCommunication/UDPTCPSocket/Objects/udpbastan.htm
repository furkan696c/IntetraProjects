<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\udpbastan.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\udpbastan.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Mon Aug 19 15:18:23 2024
<BR><P>
<H3>Maximum Stack Usage =        232 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
net_eth_iface_run &rArr; net_tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[dd]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[119]">osRtxErrorNotify</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[119]">osRtxErrorNotify</a><BR>
 <LI><a href="#[106]">net_sys_error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[106]">net_sys_error</a><BR>
 <LI><a href="#[7d]">osRtxIdleThread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7d]">osRtxIdleThread</a><BR>
 <LI><a href="#[13f]">net_strcasecmp</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13f]">net_strcasecmp</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[65]">CEC_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[9f]">Control</a> from emac_stm32f7xx.o(.text.Control) referenced from emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[9e]">ControlTimer</a> from emac_stm32f7xx.o(.text.ControlTimer) referenced from emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[61]">DMA2D_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from emac_stm32f7xx.o(.text.ETH_IRQHandler) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[5a]">FPU_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[92]">GetCapabilities</a> from emac_stm32f7xx.o(.text.GetCapabilities) referenced from emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[a9]">GetLinkInfo</a> from phy_lan8742a.o(.text.GetLinkInfo) referenced from phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
 <LI><a href="#[a8]">GetLinkState</a> from phy_lan8742a.o(.text.GetLinkState) referenced from phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
 <LI><a href="#[96]">GetMacAddress</a> from emac_stm32f7xx.o(.text.GetMacAddress) referenced from emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[9b]">GetRxFrameSize</a> from emac_stm32f7xx.o(.text.GetRxFrameSize) referenced from emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[9c]">GetRxFrameTime</a> from emac_stm32f7xx.o(.text.GetRxFrameTime) referenced from emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[9d]">GetTxFrameTime</a> from emac_stm32f7xx.o(.text.GetTxFrameTime) referenced from emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[91]">GetVersion</a> from emac_stm32f7xx.o(.text.GetVersion) referenced from emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[a2]">GetVersion</a> from phy_lan8742a.o(.text.GetVersion) referenced from phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[67]">I2C4_ER_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[66]">I2C4_EV_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[93]">Initialize</a> from emac_stm32f7xx.o(.text.Initialize) referenced from emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[a3]">Initialize</a> from phy_lan8742a.o(.text.Initialize) referenced from phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
 <LI><a href="#[64]">LPTIM1_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[a0]">PHY_Read</a> from emac_stm32f7xx.o(.text.PHY_Read) referenced from emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[a1]">PHY_Write</a> from emac_stm32f7xx.o(.text.PHY_Write) referenced from emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from irq_cm4f.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[95]">PowerControl</a> from emac_stm32f7xx.o(.text.PowerControl) referenced from emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[a5]">PowerControl</a> from phy_lan8742a.o(.text.PowerControl) referenced from phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
 <LI><a href="#[63]">QUADSPI_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[59]">RNG_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[9a]">ReadFrame</a> from emac_stm32f7xx.o(.text.ReadFrame) referenced from emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[60]">SAI1_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[62]">SAI2_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[3b]">SDMMC1_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[68]">SPDIF_RX_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[5d]">SPI4_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[5e]">SPI5_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[5f]">SPI6_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from irq_cm4f.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[99]">SendFrame</a> from emac_stm32f7xx.o(.text.SendFrame) referenced from emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[98]">SetAddressFilter</a> from emac_stm32f7xx.o(.text.SetAddressFilter) referenced from emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[a6]">SetInterface</a> from phy_lan8742a.o(.text.SetInterface) referenced from phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
 <LI><a href="#[97]">SetMacAddress</a> from emac_stm32f7xx.o(.text.SetMacAddress) referenced from emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[a7]">SetMode</a> from phy_lan8742a.o(.text.SetMode) referenced from phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
 <LI><a href="#[9]">SysTick_Handler</a> from irq_cm4f.o(.text) referenced from rtx_kernel.o(.text.svcRtxKernelStart)
 <LI><a href="#[9]">SysTick_Handler</a> from irq_cm4f.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[69]">SystemInit</a> from system_stm32f7xx.o(.text.SystemInit) referenced from startup_stm32f745xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[5b]">UART7_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[5c]">UART8_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[94]">Uninitialize</a> from emac_stm32f7xx.o(.text.Uninitialize) referenced from emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[a4]">Uninitialize</a> from phy_lan8742a.o(.text.Uninitialize) referenced from phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f745xx.o(.text) referenced from startup_stm32f745xx.o(RESET)
 <LI><a href="#[6a]">__main</a> from __main.o(!!!main) referenced from startup_stm32f745xx.o(.text)
 <LI><a href="#[aa]">eth0_callback</a> from net_config.o(.text.eth0_callback) referenced from net_config.o(.rodata.eth0_ll_config)
 <LI><a href="#[6b]">ledblinkThread</a> from thread.o(.text.ledblinkThread) referenced 2 times from main.o(.text.main)
 <LI><a href="#[6c]">nbns_listener</a> from net_nbns_client.o(.text.nbns_listener) referenced from net_nbns_client.o(.text.net_nbns_client_init)
 <LI><a href="#[6e]">netCore_Thread</a> from net_sys.o(.text.netCore_Thread) referenced 2 times from net_config.o(.text.netos_thread_create)
 <LI><a href="#[6d]">netETH_Thread</a> from net_eth.o(.text.netETH_Thread) referenced 2 times from net_config.o(.text.netif_create)
 <LI><a href="#[b1]">net_arp_cache_init</a> from net_arp.o(.text.net_arp_cache_init) referenced from net_config.o(.rodata.sys_fn_init)
 <LI><a href="#[ba]">net_arp_cache_run</a> from net_arp.o(.text.net_arp_cache_run) referenced from net_config.o(.rodata.sys_fn_run)
 <LI><a href="#[ac]">net_eth_config_mcast</a> from net_eth.o(.text.net_eth_config_mcast) referenced from net_config.o(.rodata.net_eth0_if_config)
 <LI><a href="#[af]">net_eth_iface_init</a> from net_eth.o(.text.net_eth_iface_init) referenced from net_config.o(.rodata.sys_fn_init)
 <LI><a href="#[b8]">net_eth_iface_run</a> from net_eth.o(.text.net_eth_iface_run) referenced from net_config.o(.rodata.sys_fn_run)
 <LI><a href="#[ad]">net_eth_output</a> from net_eth.o(.text.net_eth_output) referenced from net_config.o(.rodata.net_eth0_if_config)
 <LI><a href="#[ab]">net_eth_send_frame</a> from net_eth.o(.text.net_eth_send_frame) referenced from net_config.o(.rodata.net_eth0_if_config)
 <LI><a href="#[b4]">net_igmp_host_init</a> from net_igmp.o(.text.net_igmp_host_init) referenced from net_config.o(.rodata.sys_fn_init)
 <LI><a href="#[bd]">net_igmp_host_run</a> from net_igmp.o(.text.net_igmp_host_run) referenced from net_config.o(.rodata.sys_fn_run)
 <LI><a href="#[b2]">net_ip4_frag_init</a> from net_ip4_frag.o(.text.net_ip4_frag_init) referenced from net_config.o(.rodata.sys_fn_init)
 <LI><a href="#[bb]">net_ip4_frag_run</a> from net_ip4_frag.o(.text.net_ip4_frag_run) referenced from net_config.o(.rodata.sys_fn_run)
 <LI><a href="#[b0]">net_loop_iface_init</a> from net_loopback.o(.text.net_loop_iface_init) referenced from net_config.o(.rodata.sys_fn_init)
 <LI><a href="#[b9]">net_loop_iface_run</a> from net_loopback.o(.text.net_loop_iface_run) referenced from net_config.o(.rodata.sys_fn_run)
 <LI><a href="#[ae]">net_loop_send_frame</a> from net_loopback.o(.text.net_loop_send_frame) referenced from net_loopback.o(.rodata.net_loop_if_config)
 <LI><a href="#[b7]">net_nbns_client_init</a> from net_nbns_client.o(.text.net_nbns_client_init) referenced from net_config.o(.rodata.sys_fn_init)
 <LI><a href="#[bf]">net_nbns_client_run</a> from net_nbns_client.o(.text.net_nbns_client_run) referenced from net_config.o(.rodata.sys_fn_run)
 <LI><a href="#[b3]">net_ping_client_init</a> from net_ping_core.o(.text.net_ping_client_init) referenced from net_config.o(.rodata.sys_fn_init)
 <LI><a href="#[bc]">net_ping_client_run</a> from net_ping_core.o(.text.net_ping_client_run) referenced from net_config.o(.rodata.sys_fn_run)
 <LI><a href="#[6f]">net_sys_tick</a> from net_sys.o(.text.net_sys_tick) referenced 2 times from net_config.o(.text.netos_timer_create)
 <LI><a href="#[b6]">net_tcp_socket_init</a> from net_tcp.o(.text.net_tcp_socket_init) referenced from net_config.o(.rodata.sys_fn_init)
 <LI><a href="#[be]">net_tcp_socket_run</a> from net_tcp.o(.text.net_tcp_socket_run) referenced from net_config.o(.rodata.sys_fn_run)
 <LI><a href="#[b5]">net_udp_socket_init</a> from net_udp.o(.text.net_udp_socket_init) referenced from net_config.o(.rodata.sys_fn_init)
 <LI><a href="#[7d]">osRtxIdleThread</a> from rtx_config.o(.text.osRtxIdleThread) referenced from rtx_thread.o(.text.osRtxThreadStartup)
 <LI><a href="#[8b]">osRtxMemoryInit</a> from rtx_memory.o(.text.osRtxMemoryInit) referenced from rtx_kernel.o(.text.svcRtxKernelInitialize)
 <LI><a href="#[8c]">osRtxMessageQueuePostProcess</a> from rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) referenced from rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
 <LI><a href="#[8d]">osRtxSemaphorePostProcess</a> from rtx_semaphore.o(.text.osRtxSemaphorePostProcess) referenced from rtx_semaphore.o(.text.svcRtxSemaphoreNew)
 <LI><a href="#[8f]">osRtxThreadPostProcess</a> from rtx_thread.o(.text.osRtxThreadPostProcess) referenced from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[7e]">osRtxTimerThread</a> from rtx_timer.o(.text.osRtxTimerThread) referenced from rtx_thread.o(.text.osRtxThreadStartup)
 <LI><a href="#[7f]">osRtxTimerTick</a> from rtx_timer.o(.text.osRtxTimerTick) referenced from rtx_timer.o(.text.osRtxTimerThread)
 <LI><a href="#[8e]">osThreadExit</a> from rtx_thread.o(.text.osThreadExit) referenced from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[70]">svcRtxDelay</a> from rtx_delay.o(.text.svcRtxDelay) referenced from rtx_delay.o(.text.osDelay)
 <LI><a href="#[71]">svcRtxKernelGetState</a> from rtx_kernel.o(.text.svcRtxKernelGetState) referenced from rtx_kernel.o(.text.osKernelGetState)
 <LI><a href="#[72]">svcRtxKernelGetTickCount</a> from rtx_kernel.o(.text.svcRtxKernelGetTickCount) referenced from rtx_kernel.o(.text.osKernelGetTickCount)
 <LI><a href="#[73]">svcRtxKernelGetTickFreq</a> from rtx_kernel.o(.text.svcRtxKernelGetTickFreq) referenced from rtx_kernel.o(.text.osKernelGetTickFreq)
 <LI><a href="#[74]">svcRtxKernelInitialize</a> from rtx_kernel.o(.text.svcRtxKernelInitialize) referenced from rtx_kernel.o(.text.osKernelInitialize)
 <LI><a href="#[75]">svcRtxKernelStart</a> from rtx_kernel.o(.text.svcRtxKernelStart) referenced from rtx_kernel.o(.text.osKernelStart)
 <LI><a href="#[76]">svcRtxMessageQueueGet</a> from rtx_msgqueue.o(.text.svcRtxMessageQueueGet) referenced from rtx_msgqueue.o(.text.osMessageQueueGet)
 <LI><a href="#[77]">svcRtxMessageQueueNew</a> from rtx_msgqueue.o(.text.svcRtxMessageQueueNew) referenced from rtx_msgqueue.o(.text.osMessageQueueNew)
 <LI><a href="#[78]">svcRtxMessageQueuePut</a> from rtx_msgqueue.o(.text.svcRtxMessageQueuePut) referenced from rtx_msgqueue.o(.text.osMessageQueuePut)
 <LI><a href="#[79]">svcRtxMutexAcquire</a> from rtx_mutex.o(.text.svcRtxMutexAcquire) referenced from rtx_mutex.o(.text.osMutexAcquire)
 <LI><a href="#[7a]">svcRtxMutexDelete</a> from rtx_mutex.o(.text.svcRtxMutexDelete) referenced from rtx_mutex.o(.text.osMutexDelete)
 <LI><a href="#[7b]">svcRtxMutexNew</a> from rtx_mutex.o(.text.svcRtxMutexNew) referenced from rtx_mutex.o(.text.osMutexNew)
 <LI><a href="#[7c]">svcRtxMutexRelease</a> from rtx_mutex.o(.text.svcRtxMutexRelease) referenced from rtx_mutex.o(.text.osMutexRelease)
 <LI><a href="#[80]">svcRtxSemaphoreAcquire</a> from rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) referenced from rtx_semaphore.o(.text.osSemaphoreAcquire)
 <LI><a href="#[81]">svcRtxSemaphoreNew</a> from rtx_semaphore.o(.text.svcRtxSemaphoreNew) referenced from rtx_semaphore.o(.text.osSemaphoreNew)
 <LI><a href="#[82]">svcRtxSemaphoreRelease</a> from rtx_semaphore.o(.text.svcRtxSemaphoreRelease) referenced from rtx_semaphore.o(.text.osSemaphoreRelease)
 <LI><a href="#[83]">svcRtxThreadExit</a> from rtx_thread.o(.text.svcRtxThreadExit) referenced from rtx_thread.o(.text.osThreadExit)
 <LI><a href="#[84]">svcRtxThreadFlagsClear</a> from rtx_thread.o(.text.svcRtxThreadFlagsClear) referenced from rtx_thread.o(.text.osThreadFlagsClear)
 <LI><a href="#[85]">svcRtxThreadFlagsSet</a> from rtx_thread.o(.text.svcRtxThreadFlagsSet) referenced from rtx_thread.o(.text.osThreadFlagsSet)
 <LI><a href="#[86]">svcRtxThreadFlagsWait</a> from rtx_thread.o(.text.svcRtxThreadFlagsWait) referenced from rtx_thread.o(.text.osThreadFlagsWait)
 <LI><a href="#[87]">svcRtxThreadNew</a> from rtx_thread.o(.text.svcRtxThreadNew) referenced from rtx_thread.o(.text.osThreadNew)
 <LI><a href="#[88]">svcRtxThreadYield</a> from rtx_thread.o(.text.svcRtxThreadYield) referenced from rtx_thread.o(.text.osThreadYield)
 <LI><a href="#[89]">svcRtxTimerNew</a> from rtx_timer.o(.text.svcRtxTimerNew) referenced from rtx_timer.o(.text.osTimerNew)
 <LI><a href="#[8a]">svcRtxTimerStart</a> from rtx_timer.o(.text.svcRtxTimerStart) referenced from rtx_timer.o(.text.osTimerStart)
 <LI><a href="#[90]">tcp_cb_func</a> from thread.o(.text.tcp_cb_func) referenced 2 times from tcp.o(.text.tcpInit)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6a]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(.text)
</UL>
<P><STRONG><a name="[c4]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[c6]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1d2]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1d3]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1d4]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1d5]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1d6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[ce]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[c7]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[1d7]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1d8]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1d9]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1da]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1db]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1dc]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1dd]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1de]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1df]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1e0]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1e1]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1e2]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1e3]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1e4]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1e5]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1e6]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1e7]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1e8]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1e9]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1ea]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[d3]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1eb]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1ec]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1ed]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1ee]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1ef]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1f0]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1f1]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[c5]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1f2]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[c9]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[cb]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_entry_postsh_1 &rArr; _platform_post_stackheap_init &rArr; osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[cd]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[cf]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1f3]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[de]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[d2]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1f4]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[d4]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f745xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[dd]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f745xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, irq_cm4f.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, irq_cm4f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PendSV_Handler &rArr; osRtxPendSV_Handler &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, irq_cm4f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; osRtxTick_Handler &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_stm32f745xx.o(RESET)
<LI> rtx_kernel.o(.text.svcRtxKernelStart)
</UL>
<P><STRONG><a name="[ef]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[1f5]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
</UL>

<P><STRONG><a name="[140]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
</UL>

<P><STRONG><a name="[142]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_get
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_add
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_send_frame
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_enqueue
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
</UL>

<P><STRONG><a name="[d8]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1f6]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[1cf]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[1f7]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_nbns_client_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
</UL>

<P><STRONG><a name="[1f8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[1fa]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[1fd]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1ff]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[d1]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[200]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d5]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[201]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[202]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[203]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, emac_stm32f7xx.o(.text.ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETH_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(RESET)
</UL>
<P><STRONG><a name="[114]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 266 bytes, Stack size 52 bytes, stm32f7xx_hal_gpio.o(.text.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uninitialize
</UL>

<P><STRONG><a name="[f2]"></a>HAL_GPIO_Init</STRONG> (Thumb, 424 bytes, Stack size 48 bytes, stm32f7xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led4Config_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led3Config_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led2Config_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led1Config_Init
</UL>

<P><STRONG><a name="[135]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(.text.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledblinkThread
</UL>

<P><STRONG><a name="[133]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledblinkThread
</UL>

<P><STRONG><a name="[e4]"></a>HAL_GetTick</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, main.o(.text.HAL_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Write
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Read
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
</UL>

<P><STRONG><a name="[e7]"></a>HAL_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f7xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Init &rArr; HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e9]"></a>HAL_InitTick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text.HAL_InitTick))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[f5]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f7xx_hal_cortex.o(.text.HAL_MPU_ConfigRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[f4]"></a>HAL_MPU_Disable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(.text.HAL_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[f6]"></a>HAL_MPU_Enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(.text.HAL_MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[ea]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal.o(.text.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[e8]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f7xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[ec]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PWREx_EnableOverDrive &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ed]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, stm32f7xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[10e]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
</UL>

<P><STRONG><a name="[ee]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32f7xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[f0]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 836 bytes, Stack size 32 bytes, stm32f7xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1c7]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_AcknowledgeIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[1cd]"></a>OS_Tick_Enable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[1cc]"></a>OS_Tick_GetIRQn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[1cb]"></a>OS_Tick_Setup</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_Setup))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[136]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, system_stm32f7xx.o(.text.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>SystemInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_stm32f7xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f745xx.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>_mutex_acquire</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtx_lib.o(.text._mutex_acquire), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _mutex_acquire &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[c3]"></a>_mutex_free</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rtx_lib.o(.text._mutex_free), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mutex_free
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[c0]"></a>_mutex_initialize</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtx_lib.o(.text._mutex_initialize), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mutex_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[c2]"></a>_mutex_release</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_lib.o(.text._mutex_release), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _mutex_release &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[cc]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rtx_lib.o(.text._platform_post_stackheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _platform_post_stackheap_init &rArr; osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_postsh_1
</UL>

<P><STRONG><a name="[12f]"></a>led1Config_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, led.o(.text.led1Config_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = led1Config_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[130]"></a>led2Config_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, led.o(.text.led2Config_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = led2Config_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[131]"></a>led3Config_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, led.o(.text.led3Config_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = led3Config_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[132]"></a>led4Config_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, led.o(.text.led4Config_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = led4Config_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>ledblinkThread</STRONG> (Thumb, 328 bytes, Stack size 0 bytes, thread.o(.text.ledblinkThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ledblinkThread &rArr; sendTCP &rArr; netTCP_Send &rArr; net_tcp_send &rArr; tcp_send_data &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTCP
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[d0]"></a>main</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = main &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led4Config_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led3Config_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led2Config_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led1Config_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CACHE_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[6e]"></a>netCore_Thread</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, net_sys.o(.text.netCore_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netCore_Thread &rArr; netos_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_timer_start
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_thread_pass
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_wait
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_clear
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.text.netos_thread_create)
</UL>
<P><STRONG><a name="[174]"></a>netETH_Notify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_eth.o(.text.netETH_Notify))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[179]"></a>netETH_ReceiveRaw</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_eth.o(.text.netETH_ReceiveRaw))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[6d]"></a>netETH_Thread</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, net_eth.o(.text.netETH_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = netETH_Thread &rArr; net_sys_wakeup &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_wait
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_delay
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_wakeup
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_unlock
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_check_link
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.text.netif_create)
</UL>
<P><STRONG><a name="[14b]"></a>netInitialize</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, net_sys.o(.text.netInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = netInitialize &rArr; net_mem_init &rArr; netos_mutex_create
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_timer_create
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_thread_create
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_mutex_create
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpInit
</UL>

<P><STRONG><a name="[151]"></a>netMAC_aton</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, net_addr.o(.text.netMAC_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = netMAC_aton &rArr; net_xtouc
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_xtouc
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[153]"></a>netTCP_GetBuffer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_tcp.o(.text.netTCP_GetBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = netTCP_GetBuffer &rArr; net_tcp_get_buf &rArr; net_mem_alloc &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_get_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTCP
</UL>

<P><STRONG><a name="[155]"></a>netTCP_GetSocket</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, net_tcp.o(.text.netTCP_GetSocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = netTCP_GetSocket &rArr; net_tcp_get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_get_socket
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpInit
</UL>

<P><STRONG><a name="[157]"></a>netTCP_Listen</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, net_tcp.o(.text.netTCP_Listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = netTCP_Listen &rArr; net_tcp_listen
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_listen
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpInit
</UL>

<P><STRONG><a name="[159]"></a>netTCP_Send</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, net_tcp.o(.text.netTCP_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = netTCP_Send &rArr; net_tcp_send &rArr; tcp_send_data &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_wakeup
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_send
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTCP
</UL>

<P><STRONG><a name="[15b]"></a>netTCP_SendReady</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_tcp.o(.text.netTCP_SendReady))
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_check_send
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTCP
</UL>

<P><STRONG><a name="[15d]"></a>net_addr4_aton</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, net_addr.o(.text.net_addr4_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = net_addr4_aton &rArr; net_atoi
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[12e]"></a>net_addr4_is_subcast</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_addr.o(.text.net_addr4_is_subcast))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_is_subcast
</UL>

<P><STRONG><a name="[17f]"></a>net_addr4_to_mac</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_addr.o(.text.net_addr4_to_mac))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_collect_mcast
</UL>

<P><STRONG><a name="[15f]"></a>net_addr_find_route</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_addr.o(.text.net_addr_find_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_addr_find_route &rArr; net_ip4_find_route
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_find_route
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
</UL>

<P><STRONG><a name="[161]"></a>net_addr_get_local</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_addr.o(.text.net_addr_get_local))
<BR><BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_get_local
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
</UL>

<P><STRONG><a name="[19c]"></a>net_addr_is_unspec</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, net_addr.o(.text.net_addr_is_unspec))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
</UL>

<P><STRONG><a name="[163]"></a>net_arp_cache_add</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, net_arp.o(.text.net_arp_cache_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = net_arp_cache_add &rArr; arp_que_free &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_is_onlink
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_que_free
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_is_cacheable
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
</UL>

<P><STRONG><a name="[167]"></a>net_arp_cache_early</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, net_arp.o(.text.net_arp_cache_early))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = net_arp_cache_early &rArr; arp_send_request &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_is_onlink
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_que_free
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_is_cacheable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[168]"></a>net_arp_cache_find</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, net_arp.o(.text.net_arp_cache_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = net_arp_cache_find &rArr; arp_que_free &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_is_onlink
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_que_free
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[b1]"></a>net_arp_cache_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, net_arp.o(.text.net_arp_cache_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = net_arp_cache_init
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_init)
</UL>
<P><STRONG><a name="[ba]"></a>net_arp_cache_run</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, net_arp.o(.text.net_arp_cache_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = net_arp_cache_run &rArr; arp_send_request &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_resume
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_que_free
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_run)
</UL>
<P><STRONG><a name="[16a]"></a>net_arp_enqueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, net_arp.o(.text.net_arp_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = net_arp_enqueue &rArr; arp_send_request &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_avail
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[16c]"></a>net_arp_notify</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, net_arp.o(.text.net_arp_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = net_arp_notify &rArr; arp_send_request &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[16d]"></a>net_arp_process</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, net_arp.o(.text.net_arp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = net_arp_process &rArr; arp_proc_response &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_resume
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_proc_response
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_sender_valid
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[15e]"></a>net_atoi</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, net_common.o(.text.net_atoi))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = net_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_aton
</UL>

<P><STRONG><a name="[12c]"></a>net_chksum_buf</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, net_common.o(.text.net_chksum_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_chksum_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum_buf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_chksum
</UL>

<P><STRONG><a name="[16f]"></a>net_crc_buf</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, net_common.o(.text.net_crc_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_crc_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_8bit
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[123]"></a>net_eth_callback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_eth.o(.text.net_eth_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_eth_callback &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth0_callback
</UL>

<P><STRONG><a name="[ac]"></a>net_eth_config_mcast</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, net_eth.o(.text.net_eth_config_mcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = net_eth_config_mcast &rArr; OUTLINED_FUNCTION_2 &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_collect_mcast
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_if_map
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.net_eth0_if_config)
</UL>
<P><STRONG><a name="[af]"></a>net_eth_iface_init</STRONG> (Thumb, 516 bytes, Stack size 40 bytes, net_eth.o(.text.net_eth_iface_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = net_eth_iface_init &rArr; net_addr4_aton &rArr; net_atoi
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_create
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_crc_buf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_aton
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Notify
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netMAC_aton
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_init)
</UL>
<P><STRONG><a name="[b8]"></a>net_eth_iface_run</STRONG> (Thumb, 508 bytes, Stack size 40 bytes, net_eth.o(.text.net_eth_iface_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = net_eth_iface_run &rArr; net_tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_process
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_reass_frame
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_ReceiveRaw
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_notify
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Notify
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_run)
</UL>
<P><STRONG><a name="[ad]"></a>net_eth_output</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, net_eth.o(.text.net_eth_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = net_eth_output &rArr; OUTLINED_FUNCTION_2 &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_delay
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_if_map
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.net_eth0_if_config)
</UL>
<P><STRONG><a name="[ab]"></a>net_eth_send_frame</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, net_eth.o(.text.net_eth_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_enqueue
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_is_subcast
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_to_mac
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_if_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.net_eth0_if_config)
</UL>
<P><STRONG><a name="[18b]"></a>net_icmp_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, net_icmp.o(.text.net_icmp_init))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_init
</UL>

<P><STRONG><a name="[17b]"></a>net_icmp_process</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, net_icmp.o(.text.net_icmp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = net_icmp_process &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum_buf
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[181]"></a>net_icmp_send_echo</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, net_icmp.o(.text.net_icmp_send_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = net_icmp_send_echo &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_tx_offl_hl
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum_buf
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send_req
</UL>

<P><STRONG><a name="[173]"></a>net_igmp_collect_mcast</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, net_igmp.o(.text.net_igmp_collect_mcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_igmp_collect_mcast
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_to_mac
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
</UL>

<P><STRONG><a name="[b4]"></a>net_igmp_host_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, net_igmp.o(.text.net_igmp_host_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_igmp_host_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_init)
</UL>
<P><STRONG><a name="[bd]"></a>net_igmp_host_run</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, net_igmp.o(.text.net_igmp_host_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = net_igmp_host_run &rArr; igmp_send_report &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send_report
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_run)
</UL>
<P><STRONG><a name="[183]"></a>net_igmp_is_member</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, net_igmp.o(.text.net_igmp_is_member))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_igmp_is_member &rArr; igmp_map_group
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_map_group
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
</UL>

<P><STRONG><a name="[17d]"></a>net_igmp_process</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, net_igmp.o(.text.net_igmp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = net_igmp_process &rArr; net_ip4_chksum_buf &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum_buf
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_map_group
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[177]"></a>net_ip4_chk_frame</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, net_ip4.o(.text.net_ip4_chk_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_ip4_chk_frame &rArr; net_igmp_is_member &rArr; igmp_map_group
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_is_member
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_mtu
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_chksum
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_is_subcast
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[187]"></a>net_ip4_chksum</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, net_ip4.o(.text.net_ip4_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_ip4_chksum &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_chksum_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[127]"></a>net_ip4_chksum_buf</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_ip4.o(.text.net_ip4_chksum_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_ip4_chksum_buf &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_chksum_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send_report
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_process
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
</UL>

<P><STRONG><a name="[160]"></a>net_ip4_find_route</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, net_ip4.o(.text.net_ip4_find_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_ip4_find_route
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_is_onlink
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_find_route
</UL>

<P><STRONG><a name="[188]"></a>net_ip4_frag_add</STRONG> (Thumb, 432 bytes, Stack size 32 bytes, net_ip4_frag.o(.text.net_ip4_frag_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = net_ip4_frag_add &rArr; OUTLINED_FUNCTION_0 &rArr; que_free_list &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_reass_frame
</UL>

<P><STRONG><a name="[189]"></a>net_ip4_frag_get</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, net_ip4_frag.o(.text.net_ip4_frag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = net_ip4_frag_get &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
</UL>

<P><STRONG><a name="[b2]"></a>net_ip4_frag_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, net_ip4_frag.o(.text.net_ip4_frag_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = net_ip4_frag_init
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_init)
</UL>
<P><STRONG><a name="[bb]"></a>net_ip4_frag_run</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, net_ip4_frag.o(.text.net_ip4_frag_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = net_ip4_frag_run &rArr; OUTLINED_FUNCTION_0 &rArr; que_free_list &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_run)
</UL>
<P><STRONG><a name="[162]"></a>net_ip4_get_local</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, net_ip4.o(.text.net_ip4_get_local))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_get_local
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[18a]"></a>net_ip4_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_ip4.o(.text.net_ip4_init))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_init
</UL>

<P><STRONG><a name="[165]"></a>net_ip4_is_onlink</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, net_ip4.o(.text.net_ip4_is_onlink))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_find_route
</UL>

<P><STRONG><a name="[17a]"></a>net_ip4_reass_frame</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_ip4.o(.text.net_ip4_reass_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = net_ip4_reass_frame &rArr; net_ip4_frag_add &rArr; OUTLINED_FUNCTION_0 &rArr; que_free_list &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_add
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[128]"></a>net_ip4_send_frame</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, net_ip4.o(.text.net_ip4_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_get
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_mtu
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send_report
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[182]"></a>net_ip4_tx_offl_hl</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, net_ip4.o(.text.net_ip4_tx_offl_hl))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[b0]"></a>net_loop_iface_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, net_loopback.o(.text.net_loop_iface_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_loop_iface_init
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_init)
</UL>
<P><STRONG><a name="[b9]"></a>net_loop_iface_run</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, net_loopback.o(.text.net_loop_iface_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = net_loop_iface_run &rArr; net_tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_run)
</UL>
<P><STRONG><a name="[ae]"></a>net_loop_send_frame</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, net_loopback.o(.text.net_loop_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = net_loop_send_frame &rArr; net_sys_wakeup &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_wakeup
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_loopback.o(.rodata.net_loop_if_config)
</UL>
<P><STRONG><a name="[120]"></a>net_mem_alloc</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, net_mem.o(.text.net_mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_mem_alloc &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_buf
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_get
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_add
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_send_frame
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send_report
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_enqueue
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_get_buf
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>

<P><STRONG><a name="[16b]"></a>net_mem_avail</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, net_mem.o(.text.net_mem_avail))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_enqueue
</UL>

<P><STRONG><a name="[11d]"></a>net_mem_free</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, net_mem.o(.text.net_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_get
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_add
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_free_list
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send_report
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_que_free
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_proc_response
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_send
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>

<P><STRONG><a name="[14e]"></a>net_mem_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, net_mem.o(.text.net_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_mem_init &rArr; netos_mutex_create
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[18c]"></a>net_mem_shrink</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, net_mem.o(.text.net_mem_shrink))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_mem_shrink &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_send
</UL>

<P><STRONG><a name="[b7]"></a>net_nbns_client_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, net_nbns_client.o(.text.net_nbns_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = net_nbns_client_init &rArr; net_udp_open &rArr; udp_port_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_open
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_socket
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_init)
</UL>
<P><STRONG><a name="[bf]"></a>net_nbns_client_run</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_nbns_client.o(.text.net_nbns_client_run))
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_run)
</UL>
<P><STRONG><a name="[b3]"></a>net_ping_client_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_ping_core.o(.text.net_ping_client_init))
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_init)
</UL>
<P><STRONG><a name="[bc]"></a>net_ping_client_run</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, net_ping_core.o(.text.net_ping_client_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = net_ping_client_run &rArr; ping_send_req &rArr; net_icmp_send_echo &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_run)
</UL>
<P><STRONG><a name="[185]"></a>net_rand32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, net_sys.o(.text.net_rand32))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_process
</UL>

<P><STRONG><a name="[13f]"></a>net_strcasecmp</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, net_common.o(.text.net_strcasecmp))
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strcasecmp
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
</UL>

<P><STRONG><a name="[106]"></a>net_sys_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_config.o(.text.net_sys_error))
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_nbns_client_init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>

<P><STRONG><a name="[104]"></a>net_sys_lock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_sys.o(.text.net_sys_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_sys_lock &rArr; netos_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_Listen
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[169]"></a>net_sys_resume</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, net_sys.o(.text.net_sys_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_sys_resume &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_run
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
</UL>

<P><STRONG><a name="[6f]"></a>net_sys_tick</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, net_sys.o(.text.net_sys_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_sys_tick &rArr; net_sys_wakeup &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_wakeup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.text.netos_timer_create)
</UL>
<P><STRONG><a name="[109]"></a>net_sys_unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_sys.o(.text.net_sys_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_sys_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_Send
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>

<P><STRONG><a name="[14a]"></a>net_sys_wakeup</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, net_sys.o(.text.net_sys_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_sys_wakeup &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_Send
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_tick
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_send_frame
</UL>

<P><STRONG><a name="[15c]"></a>net_tcp_check_send</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, net_tcp.o(.text.net_tcp_check_send))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_SendReady
</UL>

<P><STRONG><a name="[154]"></a>net_tcp_get_buf</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, net_tcp.o(.text.net_tcp_get_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_tcp_get_buf &rArr; net_mem_alloc &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_GetBuffer
</UL>

<P><STRONG><a name="[156]"></a>net_tcp_get_socket</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, net_tcp.o(.text.net_tcp_get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_tcp_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_GetSocket
</UL>

<P><STRONG><a name="[158]"></a>net_tcp_listen</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, net_tcp.o(.text.net_tcp_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_tcp_listen
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_Listen
</UL>

<P><STRONG><a name="[17e]"></a>net_tcp_process</STRONG> (Thumb, 1960 bytes, Stack size 56 bytes, net_tcp.o(.text.net_tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = net_tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_cwnd
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parse_opt
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[15a]"></a>net_tcp_send</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, net_tcp.o(.text.net_tcp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = net_tcp_send &rArr; tcp_send_data &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_shrink
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_Send
</UL>

<P><STRONG><a name="[b6]"></a>net_tcp_socket_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, net_tcp.o(.text.net_tcp_socket_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = net_tcp_socket_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_init)
</UL>
<P><STRONG><a name="[be]"></a>net_tcp_socket_run</STRONG> (Thumb, 788 bytes, Stack size 40 bytes, net_tcp.o(.text.net_tcp_socket_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = net_tcp_socket_run &rArr; tcp_que_resend &rArr; OUTLINED_FUNCTION_4 &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_avail
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_free
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_run)
</UL>
<P><STRONG><a name="[141]"></a>net_udp_get_buf</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, net_udp.o(.text.net_udp_get_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_udp_get_buf &rArr; net_mem_alloc &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
</UL>

<P><STRONG><a name="[18d]"></a>net_udp_get_socket</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, net_udp.o(.text.net_udp_get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_udp_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_nbns_client_init
</UL>

<P><STRONG><a name="[18e]"></a>net_udp_open</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, net_udp.o(.text.net_udp_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_udp_open &rArr; udp_port_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_port_in_use
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_nbns_client_init
</UL>

<P><STRONG><a name="[17c]"></a>net_udp_process</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, net_udp.o(.text.net_udp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = net_udp_process &rArr; net_ip4_chksum &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[143]"></a>net_udp_send_if</STRONG> (Thumb, 372 bytes, Stack size 48 bytes, net_udp.o(.text.net_udp_send_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = net_udp_send_if &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_get_local
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_find_route
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_is_unspec
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_tx_offl_hl
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
</UL>

<P><STRONG><a name="[b5]"></a>net_udp_socket_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, net_udp.o(.text.net_udp_socket_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = net_udp_socket_init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_init)
</UL>
<P><STRONG><a name="[152]"></a>net_xtouc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, net_common.o(.text.net_xtouc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_xtouc
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2uc
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netMAC_aton
</UL>

<P><STRONG><a name="[176]"></a>netif_create</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, net_config.o(.text.netif_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netif_create
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[124]"></a>netif_lock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, net_config.o(.text.netif_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netif_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_lock
</UL>

<P><STRONG><a name="[125]"></a>netif_unlock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, net_config.o(.text.netif_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = netif_unlock &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_unlock
</UL>

<P><STRONG><a name="[148]"></a>netos_delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, net_config.o(.text.netos_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netos_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms2tick
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
</UL>

<P><STRONG><a name="[146]"></a>netos_flag_clear</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, net_config.o(.text.netos_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netos_flag_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsClear
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[171]"></a>netos_flag_set</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, net_config.o(.text.netos_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_callback
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_resume
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_wakeup
</UL>

<P><STRONG><a name="[145]"></a>netos_flag_wait</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, net_config.o(.text.netos_flag_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netos_flag_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms2tick
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[14c]"></a>netos_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, net_config.o(.text.netos_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netos_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[13b]"></a>netos_lock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, net_config.o(.text.netos_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netos_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
</UL>

<P><STRONG><a name="[14d]"></a>netos_mutex_create</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, net_config.o(.text.netos_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netos_mutex_create
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_init
</UL>

<P><STRONG><a name="[14f]"></a>netos_thread_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, net_config.o(.text.netos_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netos_thread_create
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[147]"></a>netos_thread_pass</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, net_config.o(.text.netos_thread_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netos_thread_pass
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[150]"></a>netos_timer_create</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, net_config.o(.text.netos_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netos_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[144]"></a>netos_timer_start</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, net_config.o(.text.netos_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netos_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms2tick
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[13d]"></a>netos_unlock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, net_config.o(.text.netos_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
</UL>

<P><STRONG><a name="[1a2]"></a>osDelay</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_delay.o(.text.osDelay))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_delay
</UL>

<P><STRONG><a name="[e5]"></a>osKernelGetState</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[e6]"></a>osKernelGetTickCount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[1a6]"></a>osKernelGetTickFreq</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetTickFreq))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_init
</UL>

<P><STRONG><a name="[11b]"></a>osKernelInitialize</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rtx_kernel.o(.text.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[139]"></a>osKernelStart</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelStart))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ab]"></a>osMessageQueueGet</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osMessageQueueGet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[1c8]"></a>osMessageQueueNew</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.osMessageQueueNew))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[1ae]"></a>osMessageQueuePut</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osMessageQueuePut &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[116]"></a>osMutexAcquire</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexAcquire))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_lock
</UL>

<P><STRONG><a name="[117]"></a>osMutexDelete</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexDelete), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>

<P><STRONG><a name="[118]"></a>osMutexNew</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexNew))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_mutex_create
</UL>

<P><STRONG><a name="[11a]"></a>osMutexRelease</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexRelease))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_unlock
</UL>

<P><STRONG><a name="[119]"></a>osRtxErrorNotify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(.text.osRtxErrorNotify))
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[7d]"></a>osRtxIdleThread</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(.text.osRtxIdleThread))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[1aa]"></a>osRtxKernelPreInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_lib.o(.text.osRtxKernelPreInit))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[1ce]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, rtx_memory.o(.text.osRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[1be]"></a>osRtxMemoryFree</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, rtx_memory.o(.text.osRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[8b]"></a>osRtxMemoryInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, rtx_memory.o(.text.osRtxMemoryInit))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.svcRtxKernelInitialize)
</UL>
<P><STRONG><a name="[1af]"></a>osRtxMemoryPoolAlloc</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtx_mempool.o(.text.osRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[1b1]"></a>osRtxMemoryPoolFree</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[1ca]"></a>osRtxMemoryPoolInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rtx_mempool.o(.text.osRtxMemoryPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryPoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[1b6]"></a>osRtxMutexOwnerRelease</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, rtx_mutex.o(.text.osRtxMutexOwnerRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[d6]"></a>osRtxPendSV_Handler</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, rtx_system.o(.text.osRtxPendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxPendSV_Handler &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1ad]"></a>osRtxPostProcess</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[1b8]"></a>osRtxThreadDelayTick</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadDelayTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[1b7]"></a>osRtxThreadDispatch</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
</UL>

<P><STRONG><a name="[1b2]"></a>osRtxThreadListGet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListGet))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[1c0]"></a>osRtxThreadListPut</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListPut))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[1b9]"></a>osRtxThreadListRemove</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadYield
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[1bf]"></a>osRtxThreadListSort</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadListSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadListSort
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[1ba]"></a>osRtxThreadReadyPut</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadReadyPut))
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadYield
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[1b4]"></a>osRtxThreadRegPtr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadRegPtr))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[1c2]"></a>osRtxThreadStackCheck</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadStackCheck))
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>

<P><STRONG><a name="[1c3]"></a>osRtxThreadStartup</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[1bc]"></a>osRtxThreadSwitch</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadSwitch))
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadYield
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[1c4]"></a>osRtxThreadWaitEnter</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadWaitEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayInsert
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[1b3]"></a>osRtxThreadWaitExit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadWaitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[d7]"></a>osRtxTick_Handler</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxTick_Handler &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[7e]"></a>osRtxTimerThread</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, rtx_timer.o(.text.osRtxTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxTimerThread &rArr; osMessageQueueGet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[19f]"></a>osSemaphoreAcquire</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, rtx_semaphore.o(.text.osSemaphoreAcquire))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_lock
</UL>

<P><STRONG><a name="[19e]"></a>osSemaphoreNew</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_semaphore.o(.text.osSemaphoreNew))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_create
</UL>

<P><STRONG><a name="[1a0]"></a>osSemaphoreRelease</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_unlock
</UL>

<P><STRONG><a name="[8e]"></a>osThreadExit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadExit))
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[1a3]"></a>osThreadFlagsClear</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadFlagsClear))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_clear
</UL>

<P><STRONG><a name="[1a4]"></a>osThreadFlagsSet</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rtx_thread.o(.text.osThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_set
</UL>

<P><STRONG><a name="[1a5]"></a>osThreadFlagsWait</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadFlagsWait))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_wait
</UL>

<P><STRONG><a name="[138]"></a>osThreadNew</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadNew))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_thread_create
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_create
</UL>

<P><STRONG><a name="[1a7]"></a>osThreadYield</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadYield))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_thread_pass
</UL>

<P><STRONG><a name="[1a8]"></a>osTimerNew</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rtx_timer.o(.text.osTimerNew))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_timer_create
</UL>

<P><STRONG><a name="[1a9]"></a>osTimerStart</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_timer.o(.text.osTimerStart))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_timer_start
</UL>

<P><STRONG><a name="[134]"></a>sendTCP</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tcp.o(.text.sendTCP))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sendTCP &rArr; netTCP_Send &rArr; net_tcp_send &rArr; tcp_send_data &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_SendReady
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_Send
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_GetBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledblinkThread
</UL>

<P><STRONG><a name="[137]"></a>tcpInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tcp.o(.text.tcpInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcpInit &rArr; netInitialize &rArr; net_mem_init &rArr; netos_mutex_create
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_Listen
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_GetSocket
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>tcp_cb_func</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, thread.o(.text.tcp_cb_func))
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(.text.tcpInit)
</UL>
<P><STRONG><a name="[c8]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[204]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[205]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[df]"></a>CPU_CACHE_Enable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text.CPU_CACHE_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CPU_CACHE_Enable &rArr; SCB_EnableDCache
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableICache
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>MPU_Config</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, main.o(.text.MPU_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MPU_Config &rArr; HAL_MPU_ConfigRegion
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e1]"></a>SCB_EnableDCache</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, main.o(.text.SCB_EnableDCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCB_EnableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CACHE_Enable
</UL>

<P><STRONG><a name="[e0]"></a>SCB_EnableICache</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, main.o(.text.SCB_EnableICache))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CACHE_Enable
</UL>

<P><STRONG><a name="[113]"></a>SystemClock_Config</STRONG> (Thumb, 86 bytes, Stack size 88 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115]"></a>os_kernel_is_active</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rtx_lib.o(.text.os_kernel_is_active), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>

<P><STRONG><a name="[a9]"></a>GetLinkInfo</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, phy_lan8742a.o(.text.GetLinkInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetLinkInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
</UL>
<P><STRONG><a name="[a8]"></a>GetLinkState</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, phy_lan8742a.o(.text.GetLinkState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetLinkState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
</UL>
<P><STRONG><a name="[a2]"></a>GetVersion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, phy_lan8742a.o(.text.GetVersion))
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
</UL>
<P><STRONG><a name="[a3]"></a>Initialize</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, phy_lan8742a.o(.text.Initialize))
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
</UL>
<P><STRONG><a name="[a5]"></a>PowerControl</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, phy_lan8742a.o(.text.PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
</UL>
<P><STRONG><a name="[a6]"></a>SetInterface</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, phy_lan8742a.o(.text.SetInterface))
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
</UL>
<P><STRONG><a name="[a7]"></a>SetMode</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, phy_lan8742a.o(.text.SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
</UL>
<P><STRONG><a name="[a4]"></a>Uninitialize</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, phy_lan8742a.o(.text.Uninitialize))
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
</UL>
<P><STRONG><a name="[9f]"></a>Control</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, emac_stm32f7xx.o(.text.Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Control &rArr; init_dma &rArr; init_tx_desc
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dma
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[9e]"></a>ControlTimer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, emac_stm32f7xx.o(.text.ControlTimer))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[f1]"></a>Enable_GPIO_Clock</STRONG> (Thumb, 312 bytes, Stack size 4 bytes, emac_stm32f7xx.o(.text.Enable_GPIO_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Enable_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[92]"></a>GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, emac_stm32f7xx.o(.text.GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[96]"></a>GetMacAddress</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, emac_stm32f7xx.o(.text.GetMacAddress))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[9b]"></a>GetRxFrameSize</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, emac_stm32f7xx.o(.text.GetRxFrameSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetRxFrameSize
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_InvalidateDCache_by_Addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[9c]"></a>GetRxFrameTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, emac_stm32f7xx.o(.text.GetRxFrameTime))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[9d]"></a>GetTxFrameTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, emac_stm32f7xx.o(.text.GetTxFrameTime))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[91]"></a>GetVersion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, emac_stm32f7xx.o(.text.GetVersion))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[93]"></a>Initialize</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, emac_stm32f7xx.o(.text.Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Initialize &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_GPIO_Clock
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[a0]"></a>PHY_Read</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, emac_stm32f7xx.o(.text.PHY_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PHY_Read &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[a1]"></a>PHY_Write</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, emac_stm32f7xx.o(.text.PHY_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PHY_Write &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[95]"></a>PowerControl</STRONG> (Thumb, 492 bytes, Stack size 24 bytes, emac_stm32f7xx.o(.text.PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PowerControl
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[9a]"></a>ReadFrame</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, emac_stm32f7xx.o(.text.ReadFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ReadFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_InvalidateDCache_by_Addr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_CleanDCache_by_Addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[111]"></a>SCB_CleanDCache_by_Addr</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, emac_stm32f7xx.o(.text.SCB_CleanDCache_by_Addr))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tx_desc
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rx_desc
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrame
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFrame
</UL>

<P><STRONG><a name="[e3]"></a>SCB_InvalidateDCache_by_Addr</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, emac_stm32f7xx.o(.text.SCB_InvalidateDCache_by_Addr))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrame
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFrame
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRxFrameSize
</UL>

<P><STRONG><a name="[99]"></a>SendFrame</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, emac_stm32f7xx.o(.text.SendFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SendFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_InvalidateDCache_by_Addr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_CleanDCache_by_Addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[98]"></a>SetAddressFilter</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, emac_stm32f7xx.o(.text.SetAddressFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetAddressFilter &rArr; crc32_data
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[97]"></a>SetMacAddress</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, emac_stm32f7xx.o(.text.SetMacAddress))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[94]"></a>Uninitialize</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, emac_stm32f7xx.o(.text.Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Uninitialize &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[10f]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, emac_stm32f7xx.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
</UL>

<P><STRONG><a name="[10d]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, emac_stm32f7xx.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
</UL>

<P><STRONG><a name="[110]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, emac_stm32f7xx.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
</UL>

<P><STRONG><a name="[122]"></a>crc32_8bit_rev</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, emac_stm32f7xx.o(.text.crc32_8bit_rev))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_data
</UL>

<P><STRONG><a name="[112]"></a>crc32_data</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, emac_stm32f7xx.o(.text.crc32_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc32_data
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_8bit_rev
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAddressFilter
</UL>

<P><STRONG><a name="[e2]"></a>init_dma</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, emac_stm32f7xx.o(.text.init_dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init_dma &rArr; init_tx_desc
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tx_desc
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rx_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control
</UL>

<P><STRONG><a name="[129]"></a>init_rx_desc</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, emac_stm32f7xx.o(.text.init_rx_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_rx_desc
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_CleanDCache_by_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dma
</UL>

<P><STRONG><a name="[12a]"></a>init_tx_desc</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, emac_stm32f7xx.o(.text.init_tx_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_tx_desc
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_CleanDCache_by_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dma
</UL>

<P><STRONG><a name="[eb]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>

<P><STRONG><a name="[aa]"></a>eth0_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, net_config.o(.text.eth0_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eth0_callback &rArr; net_eth_callback &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.eth0_ll_config)
</UL>
<P><STRONG><a name="[1a1]"></a>ms2tick</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, net_config.o(.text.ms2tick))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_timer_start
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_wait
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_delay
</UL>

<P><STRONG><a name="[71]"></a>svcRtxKernelGetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_kernel.o(.text.svcRtxKernelGetState))
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetState)
</UL>
<P><STRONG><a name="[72]"></a>svcRtxKernelGetTickCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_kernel.o(.text.svcRtxKernelGetTickCount))
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetTickCount)
</UL>
<P><STRONG><a name="[73]"></a>svcRtxKernelGetTickFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_kernel.o(.text.svcRtxKernelGetTickFreq))
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetTickFreq)
</UL>
<P><STRONG><a name="[74]"></a>svcRtxKernelInitialize</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, rtx_kernel.o(.text.svcRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = svcRtxKernelInitialize &rArr; osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelInitialize)
</UL>
<P><STRONG><a name="[75]"></a>svcRtxKernelStart</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, rtx_kernel.o(.text.svcRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = svcRtxKernelStart &rArr; osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetIRQn
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelStart)
</UL>
<P><STRONG><a name="[1c1]"></a>ThreadFlagsCheck</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, rtx_thread.o(.text.ThreadFlagsCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ThreadFlagsCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[1bb]"></a>osRtxThreadBlock</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadBlock))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>

<P><STRONG><a name="[1c5]"></a>osRtxThreadDelayInsert</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadDelayInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[1c6]"></a>osRtxThreadDelayRemove</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadDelayRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>

<P><STRONG><a name="[1bd]"></a>osRtxThreadFree</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadFree &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[8f]"></a>osRtxThreadPostProcess</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxThreadPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[83]"></a>svcRtxThreadExit</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcRtxThreadExit &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadExit)
</UL>
<P><STRONG><a name="[84]"></a>svcRtxThreadFlagsClear</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rtx_thread.o(.text.svcRtxThreadFlagsClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxThreadFlagsClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadFlagsClear)
</UL>
<P><STRONG><a name="[85]"></a>svcRtxThreadFlagsSet</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxThreadFlagsSet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadFlagsSet)
</UL>
<P><STRONG><a name="[86]"></a>svcRtxThreadFlagsWait</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, rtx_thread.o(.text.svcRtxThreadFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxThreadFlagsWait &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadFlagsWait)
</UL>
<P><STRONG><a name="[87]"></a>svcRtxThreadNew</STRONG> (Thumb, 476 bytes, Stack size 48 bytes, rtx_thread.o(.text.svcRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = svcRtxThreadNew &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadNew)
</UL>
<P><STRONG><a name="[88]"></a>svcRtxThreadYield</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadYield))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcRtxThreadYield
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadYield)
</UL>
<P><STRONG><a name="[70]"></a>svcRtxDelay</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_delay.o(.text.svcRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svcRtxDelay &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_delay.o(.text.osDelay)
</UL>
<P><STRONG><a name="[1c9]"></a>TimerInsert</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, rtx_timer.o(.text.TimerInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimerInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStart
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[1d0]"></a>TimerRemove</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rtx_timer.o(.text.TimerRemove))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStart
</UL>

<P><STRONG><a name="[7f]"></a>osRtxTimerTick</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rtx_timer.o(.text.osRtxTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxTimerTick &rArr; osMessageQueuePut &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osRtxTimerThread)
</UL>
<P><STRONG><a name="[89]"></a>svcRtxTimerNew</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, rtx_timer.o(.text.svcRtxTimerNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxTimerNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osTimerNew)
</UL>
<P><STRONG><a name="[8a]"></a>svcRtxTimerStart</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, rtx_timer.o(.text.svcRtxTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svcRtxTimerStart &rArr; TimerInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRemove
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osTimerStart)
</UL>
<P><STRONG><a name="[79]"></a>svcRtxMutexAcquire</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxMutexAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexAcquire)
</UL>
<P><STRONG><a name="[7a]"></a>svcRtxMutexDelete</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxMutexDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexDelete)
</UL>
<P><STRONG><a name="[7b]"></a>svcRtxMutexNew</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = svcRtxMutexNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexNew)
</UL>
<P><STRONG><a name="[7c]"></a>svcRtxMutexRelease</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxMutexRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexRelease)
</UL>
<P><STRONG><a name="[8d]"></a>osRtxSemaphorePostProcess</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rtx_semaphore.o(.text.osRtxSemaphorePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxSemaphorePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.svcRtxSemaphoreNew)
</UL>
<P><STRONG><a name="[80]"></a>svcRtxSemaphoreAcquire</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxSemaphoreAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreAcquire)
</UL>
<P><STRONG><a name="[81]"></a>svcRtxSemaphoreNew</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxSemaphoreNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreNew)
</UL>
<P><STRONG><a name="[82]"></a>svcRtxSemaphoreRelease</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxSemaphoreRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreRelease)
</UL>
<P><STRONG><a name="[f8]"></a>eth_lock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_eth.o(.text.eth_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eth_lock &rArr; netif_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[149]"></a>eth_check_link</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, net_eth.o(.text.eth_check_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eth_check_link
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
</UL>

<P><STRONG><a name="[102]"></a>eth_unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_eth.o(.text.eth_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[172]"></a>eth_if_map</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, net_eth.o(.text.eth_if_map))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
</UL>

<P><STRONG><a name="[f7]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_eth.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; eth_lock &rArr; netif_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
</UL>

<P><STRONG><a name="[175]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_eth.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[101]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_eth.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
</UL>

<P><STRONG><a name="[105]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_eth.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[178]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_eth.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[16e]"></a>arp_sender_valid</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, net_arp.o(.text.arp_sender_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arp_sender_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
</UL>

<P><STRONG><a name="[11f]"></a>arp_send_reply</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, net_arp.o(.text.arp_send_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = arp_send_reply &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
</UL>

<P><STRONG><a name="[11c]"></a>arp_proc_response</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, net_arp.o(.text.arp_proc_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = arp_proc_response &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
</UL>

<P><STRONG><a name="[121]"></a>arp_send_request</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, net_arp.o(.text.arp_send_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = arp_send_request &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_run
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_enqueue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_notify
</UL>

<P><STRONG><a name="[164]"></a>arp_is_cacheable</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, net_arp.o(.text.arp_is_cacheable))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
</UL>

<P><STRONG><a name="[166]"></a>arp_cache_alloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, net_arp.o(.text.arp_cache_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
</UL>

<P><STRONG><a name="[11e]"></a>arp_que_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, net_arp.o(.text.arp_que_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = arp_que_free &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_run
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
</UL>

<P><STRONG><a name="[184]"></a>igmp_map_group</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, net_igmp.o(.text.igmp_map_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = igmp_map_group
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_is_member
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_process
</UL>

<P><STRONG><a name="[126]"></a>igmp_send_report</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, net_igmp.o(.text.igmp_send_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = igmp_send_report &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum_buf
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_host_run
</UL>

<P><STRONG><a name="[fa]"></a>que_free_list</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, net_ip4_frag.o(.text.que_free_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = que_free_list &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[f9]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_ip4_frag.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; que_free_list &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_free_list
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_run
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_add
</UL>

<P><STRONG><a name="[fd]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_ip4_frag.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_init
</UL>

<P><STRONG><a name="[19b]"></a>udp_port_in_use</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, net_udp.o(.text.udp_port_in_use))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_port_in_use
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_open
</UL>

<P><STRONG><a name="[fe]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_udp.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_socket_init
</UL>

<P><STRONG><a name="[100]"></a>tcp_send_ctrl</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, net_tcp.o(.text.tcp_send_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tcp_send_ctrl &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[194]"></a>tcp_transit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, net_tcp.o(.text.tcp_transit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_transit &rArr; tcp_que_free &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_free
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[197]"></a>tcp_send_data</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, net_tcp.o(.text.tcp_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tcp_send_data &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_send
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
</UL>

<P><STRONG><a name="[199]"></a>tcp_que_resend</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, net_tcp.o(.text.tcp_que_resend))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tcp_que_resend &rArr; OUTLINED_FUNCTION_4 &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
</UL>

<P><STRONG><a name="[196]"></a>tcp_que_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, net_tcp.o(.text.tcp_que_init))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[19a]"></a>tcp_que_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, net_tcp.o(.text.tcp_que_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_que_free &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
</UL>

<P><STRONG><a name="[190]"></a>tcp_send_reset</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, net_tcp.o(.text.tcp_send_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tcp_send_reset &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[195]"></a>tcp_parse_opt</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, net_tcp.o(.text.tcp_parse_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_parse_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[192]"></a>tcp_set_cwnd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, net_tcp.o(.text.tcp_set_cwnd))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[1d1]"></a>tcp_write</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, net_tcp.o(.text.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_tx_offl_hl
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_get_local
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_data
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>

<P><STRONG><a name="[198]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net_tcp.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
</UL>

<P><STRONG><a name="[ff]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_tcp.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[103]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_tcp.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; net_sys_lock &rArr; netos_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_Send
</UL>

<P><STRONG><a name="[193]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_tcp.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[107]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_tcp.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
</UL>

<P><STRONG><a name="[108]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_tcp.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; net_sys_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_Listen
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_GetSocket
</UL>

<P><STRONG><a name="[191]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_tcp.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[10a]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_tcp.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OUTLINED_FUNCTION_7 &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[10b]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_tcp.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_init
</UL>

<P><STRONG><a name="[10c]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_tcp.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_9 &rArr; net_sys_lock &rArr; netos_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_GetSocket
</UL>

<P><STRONG><a name="[6c]"></a>nbns_listener</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, net_nbns_client.o(.text.nbns_listener))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = nbns_listener &rArr; net_udp_send_if &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_buf
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strcasecmp
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base16_decode
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_nbns_client.o(.text.net_nbns_client_init)
</UL>
<P><STRONG><a name="[13e]"></a>base16_decode</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, net_nbns_client.o(.text.base16_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = base16_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
</UL>

<P><STRONG><a name="[fb]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_nbns_client.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_nbns_client_init
</UL>

<P><STRONG><a name="[18f]"></a>ping_send_req</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_ping_core.o(.text.ping_send_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ping_send_req &rArr; net_icmp_send_echo &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ping_client_run
</UL>

<P><STRONG><a name="[1ac]"></a>MessageQueueGet</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rtx_msgqueue.o(.text.MessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MessageQueueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[1b5]"></a>MessageQueuePut</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rtx_msgqueue.o(.text.MessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[1b0]"></a>MessageQueueRemove</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.MessageQueueRemove))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[8c]"></a>osRtxMessageQueuePostProcess</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxMessageQueuePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
</UL>
<P><STRONG><a name="[76]"></a>svcRtxMessageQueueGet</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcRtxMessageQueueGet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueueGet)
</UL>
<P><STRONG><a name="[77]"></a>svcRtxMessageQueueNew</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = svcRtxMessageQueueNew &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueueNew)
</UL>
<P><STRONG><a name="[78]"></a>svcRtxMessageQueuePut</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcRtxMessageQueuePut &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueuePut)
</UL>
<P><STRONG><a name="[12d]"></a>ip4_is_subcast</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net_ip4.o(.text.ip4_is_subcast))
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_is_subcast
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
</UL>

<P><STRONG><a name="[12b]"></a>ip4_get_chksum</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_ip4.o(.text.ip4_get_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ip4_get_chksum &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_chksum_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
</UL>

<P><STRONG><a name="[186]"></a>ip4_get_mtu</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, net_ip4.o(.text.ip4_get_mtu))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
</UL>

<P><STRONG><a name="[13a]"></a>mem_lock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_mem.o(.text.mem_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_lock &rArr; netos_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_shrink
</UL>

<P><STRONG><a name="[13c]"></a>mem_unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_mem.o(.text.mem_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_shrink
</UL>

<P><STRONG><a name="[170]"></a>crc32_8bit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, net_common.o(.text.crc32_8bit))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_crc_buf
</UL>

<P><STRONG><a name="[19d]"></a>hex2uc</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, net_common.o(.text.hex2uc))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_xtouc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
