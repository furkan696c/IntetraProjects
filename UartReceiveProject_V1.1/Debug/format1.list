
format1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038b4  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003a7c  08003a7c  00004a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a94  08003a94  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003a94  08003a94  00004a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a9c  08003a9c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a9c  08003a9c  00004a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003aa0  08003aa0  00004aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003aa4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  2000000c  08003ab0  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08003ab0  000052c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a6f2  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a5e  00000000  00000000  0000f72e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e8  00000000  00000000  00011190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000609  00000000  00000000  00011978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002486c  00000000  00000000  00011f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b57b  00000000  00000000  000367ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3681  00000000  00000000  00041d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001253e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ed4  00000000  00000000  0012542c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00127300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003a64 	.word	0x08003a64

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08003a64 	.word	0x08003a64

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <CRC16_Modbus>:
 *      Author: FURKAN ÇALIŞKAN
 */
#include "crcModbus.h"


uint16_t CRC16_Modbus(uint8_t *data, uint16_t length) {
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	460b      	mov	r3, r1
 8000502:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 8000504:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000508:	81fb      	strh	r3, [r7, #14]
    uint16_t pos, i;

    for (pos = 0; pos < length; pos++) {
 800050a:	2300      	movs	r3, #0
 800050c:	81bb      	strh	r3, [r7, #12]
 800050e:	e026      	b.n	800055e <CRC16_Modbus+0x66>
        crc ^= (uint16_t)data[pos]; // Verinin ilk byte'ı ile XOR işlemi
 8000510:	89bb      	ldrh	r3, [r7, #12]
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	4413      	add	r3, r2
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	461a      	mov	r2, r3
 800051a:	89fb      	ldrh	r3, [r7, #14]
 800051c:	4053      	eors	r3, r2
 800051e:	81fb      	strh	r3, [r7, #14]
        for (i = 8; i != 0; i--) { // Her bit için
 8000520:	2308      	movs	r3, #8
 8000522:	817b      	strh	r3, [r7, #10]
 8000524:	e015      	b.n	8000552 <CRC16_Modbus+0x5a>
            if ((crc & 0x0001) != 0) { // Eğer en düşük bit (LSB) 1 ise
 8000526:	89fb      	ldrh	r3, [r7, #14]
 8000528:	f003 0301 	and.w	r3, r3, #1
 800052c:	2b00      	cmp	r3, #0
 800052e:	d00a      	beq.n	8000546 <CRC16_Modbus+0x4e>
                crc >>= 1; // Sağ kaydırma
 8000530:	89fb      	ldrh	r3, [r7, #14]
 8000532:	085b      	lsrs	r3, r3, #1
 8000534:	81fb      	strh	r3, [r7, #14]
                crc ^= 0xA001; // Polinom ile XOR işlemi
 8000536:	89fb      	ldrh	r3, [r7, #14]
 8000538:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 800053c:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 8000540:	43db      	mvns	r3, r3
 8000542:	81fb      	strh	r3, [r7, #14]
 8000544:	e002      	b.n	800054c <CRC16_Modbus+0x54>
            } else { // LSB 0 ise sadece sağ kaydırma
                crc >>= 1;
 8000546:	89fb      	ldrh	r3, [r7, #14]
 8000548:	085b      	lsrs	r3, r3, #1
 800054a:	81fb      	strh	r3, [r7, #14]
        for (i = 8; i != 0; i--) { // Her bit için
 800054c:	897b      	ldrh	r3, [r7, #10]
 800054e:	3b01      	subs	r3, #1
 8000550:	817b      	strh	r3, [r7, #10]
 8000552:	897b      	ldrh	r3, [r7, #10]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d1e6      	bne.n	8000526 <CRC16_Modbus+0x2e>
    for (pos = 0; pos < length; pos++) {
 8000558:	89bb      	ldrh	r3, [r7, #12]
 800055a:	3301      	adds	r3, #1
 800055c:	81bb      	strh	r3, [r7, #12]
 800055e:	89ba      	ldrh	r2, [r7, #12]
 8000560:	887b      	ldrh	r3, [r7, #2]
 8000562:	429a      	cmp	r2, r3
 8000564:	d3d4      	bcc.n	8000510 <CRC16_Modbus+0x18>
            }
        }
    }
    return crc;
 8000566:	89fb      	ldrh	r3, [r7, #14]
}
 8000568:	4618      	mov	r0, r3
 800056a:	3714      	adds	r7, #20
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <clearPAYLOAD>:
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

void clearPAYLOAD(void)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
	for (int i = 0; i <= indexxPAYLOAD; i++)
 800057a:	2300      	movs	r3, #0
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	e007      	b.n	8000590 <clearPAYLOAD+0x1c>
	{
		RXpayload[i] = 0;
 8000580:	4a0b      	ldr	r2, [pc, #44]	@ (80005b0 <clearPAYLOAD+0x3c>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4413      	add	r3, r2
 8000586:	2200      	movs	r2, #0
 8000588:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i <= indexxPAYLOAD; i++)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	3301      	adds	r3, #1
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	4b08      	ldr	r3, [pc, #32]	@ (80005b4 <clearPAYLOAD+0x40>)
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	461a      	mov	r2, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4293      	cmp	r3, r2
 800059a:	ddf1      	ble.n	8000580 <clearPAYLOAD+0xc>
	}
	indexxPAYLOAD = 0;
 800059c:	4b05      	ldr	r3, [pc, #20]	@ (80005b4 <clearPAYLOAD+0x40>)
 800059e:	2200      	movs	r2, #0
 80005a0:	801a      	strh	r2, [r3, #0]
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	200000b8 	.word	0x200000b8
 80005b4:	200002ba 	.word	0x200002ba

080005b8 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]

		if(indexx==0 && data==SOH) //is first index SOH?
 80005c0:	4b69      	ldr	r3, [pc, #420]	@ (8000768 <HAL_UART_RxCpltCallback+0x1b0>)
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d10a      	bne.n	80005de <HAL_UART_RxCpltCallback+0x26>
 80005c8:	4b68      	ldr	r3, [pc, #416]	@ (800076c <HAL_UART_RxCpltCallback+0x1b4>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d106      	bne.n	80005de <HAL_UART_RxCpltCallback+0x26>
		{
			indexx++;
 80005d0:	4b65      	ldr	r3, [pc, #404]	@ (8000768 <HAL_UART_RxCpltCallback+0x1b0>)
 80005d2:	881b      	ldrh	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	4b63      	ldr	r3, [pc, #396]	@ (8000768 <HAL_UART_RxCpltCallback+0x1b0>)
 80005da:	801a      	strh	r2, [r3, #0]
 80005dc:	e0ba      	b.n	8000754 <HAL_UART_RxCpltCallback+0x19c>
		}
		else if(indexx==1)//if first index is SOH then second index is data lenght.
 80005de:	4b62      	ldr	r3, [pc, #392]	@ (8000768 <HAL_UART_RxCpltCallback+0x1b0>)
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d118      	bne.n	8000618 <HAL_UART_RxCpltCallback+0x60>
		{
			leng=data;
 80005e6:	4b61      	ldr	r3, [pc, #388]	@ (800076c <HAL_UART_RxCpltCallback+0x1b4>)
 80005e8:	781a      	ldrb	r2, [r3, #0]
 80005ea:	4b61      	ldr	r3, [pc, #388]	@ (8000770 <HAL_UART_RxCpltCallback+0x1b8>)
 80005ec:	701a      	strb	r2, [r3, #0]
			indexETX=3+leng; //After this, the location of crc, etx and eot is determined according to the byte that gives the data length.
 80005ee:	4b60      	ldr	r3, [pc, #384]	@ (8000770 <HAL_UART_RxCpltCallback+0x1b8>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	3303      	adds	r3, #3
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	4b5f      	ldr	r3, [pc, #380]	@ (8000774 <HAL_UART_RxCpltCallback+0x1bc>)
 80005f8:	801a      	strh	r2, [r3, #0]
			indexx++;
 80005fa:	4b5b      	ldr	r3, [pc, #364]	@ (8000768 <HAL_UART_RxCpltCallback+0x1b0>)
 80005fc:	881b      	ldrh	r3, [r3, #0]
 80005fe:	3301      	adds	r3, #1
 8000600:	b29a      	uxth	r2, r3
 8000602:	4b59      	ldr	r3, [pc, #356]	@ (8000768 <HAL_UART_RxCpltCallback+0x1b0>)
 8000604:	801a      	strh	r2, [r3, #0]

			if(leng==0)
 8000606:	4b5a      	ldr	r3, [pc, #360]	@ (8000770 <HAL_UART_RxCpltCallback+0x1b8>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	f040 80a2 	bne.w	8000754 <HAL_UART_RxCpltCallback+0x19c>
			{
				indexx=0;
 8000610:	4b55      	ldr	r3, [pc, #340]	@ (8000768 <HAL_UART_RxCpltCallback+0x1b0>)
 8000612:	2200      	movs	r2, #0
 8000614:	801a      	strh	r2, [r3, #0]
 8000616:	e09d      	b.n	8000754 <HAL_UART_RxCpltCallback+0x19c>
			}
		}
		else if(indexx==2 && data==STX)//check the beginning of the text.
 8000618:	4b53      	ldr	r3, [pc, #332]	@ (8000768 <HAL_UART_RxCpltCallback+0x1b0>)
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	2b02      	cmp	r3, #2
 800061e:	d10c      	bne.n	800063a <HAL_UART_RxCpltCallback+0x82>
 8000620:	4b52      	ldr	r3, [pc, #328]	@ (800076c <HAL_UART_RxCpltCallback+0x1b4>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b02      	cmp	r3, #2
 8000626:	d108      	bne.n	800063a <HAL_UART_RxCpltCallback+0x82>
		{
			indexx++;
 8000628:	4b4f      	ldr	r3, [pc, #316]	@ (8000768 <HAL_UART_RxCpltCallback+0x1b0>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	3301      	adds	r3, #1
 800062e:	b29a      	uxth	r2, r3
 8000630:	4b4d      	ldr	r3, [pc, #308]	@ (8000768 <HAL_UART_RxCpltCallback+0x1b0>)
 8000632:	801a      	strh	r2, [r3, #0]
			clearPAYLOAD(); //if data format is true then clear payload and new receiving data is your real data BUT not finished yet.
 8000634:	f7ff ff9e 	bl	8000574 <clearPAYLOAD>
 8000638:	e08c      	b.n	8000754 <HAL_UART_RxCpltCallback+0x19c>
		}
		else if(indexx>2 && indexx<indexETX)//Store data until the ETX byte arrives.
 800063a:	4b4b      	ldr	r3, [pc, #300]	@ (8000768 <HAL_UART_RxCpltCallback+0x1b0>)
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	2b02      	cmp	r3, #2
 8000640:	d919      	bls.n	8000676 <HAL_UART_RxCpltCallback+0xbe>
 8000642:	4b49      	ldr	r3, [pc, #292]	@ (8000768 <HAL_UART_RxCpltCallback+0x1b0>)
 8000644:	881a      	ldrh	r2, [r3, #0]
 8000646:	4b4b      	ldr	r3, [pc, #300]	@ (8000774 <HAL_UART_RxCpltCallback+0x1bc>)
 8000648:	881b      	ldrh	r3, [r3, #0]
 800064a:	429a      	cmp	r2, r3
 800064c:	d213      	bcs.n	8000676 <HAL_UART_RxCpltCallback+0xbe>
		{
			RXpayload[indexxPAYLOAD]=data;
 800064e:	4b4a      	ldr	r3, [pc, #296]	@ (8000778 <HAL_UART_RxCpltCallback+0x1c0>)
 8000650:	881b      	ldrh	r3, [r3, #0]
 8000652:	461a      	mov	r2, r3
 8000654:	4b45      	ldr	r3, [pc, #276]	@ (800076c <HAL_UART_RxCpltCallback+0x1b4>)
 8000656:	7819      	ldrb	r1, [r3, #0]
 8000658:	4b48      	ldr	r3, [pc, #288]	@ (800077c <HAL_UART_RxCpltCallback+0x1c4>)
 800065a:	5499      	strb	r1, [r3, r2]
			indexxPAYLOAD++;
 800065c:	4b46      	ldr	r3, [pc, #280]	@ (8000778 <HAL_UART_RxCpltCallback+0x1c0>)
 800065e:	881b      	ldrh	r3, [r3, #0]
 8000660:	3301      	adds	r3, #1
 8000662:	b29a      	uxth	r2, r3
 8000664:	4b44      	ldr	r3, [pc, #272]	@ (8000778 <HAL_UART_RxCpltCallback+0x1c0>)
 8000666:	801a      	strh	r2, [r3, #0]
			indexx++;
 8000668:	4b3f      	ldr	r3, [pc, #252]	@ (8000768 <HAL_UART_RxCpltCallback+0x1b0>)
 800066a:	881b      	ldrh	r3, [r3, #0]
 800066c:	3301      	adds	r3, #1
 800066e:	b29a      	uxth	r2, r3
 8000670:	4b3d      	ldr	r3, [pc, #244]	@ (8000768 <HAL_UART_RxCpltCallback+0x1b0>)
 8000672:	801a      	strh	r2, [r3, #0]
 8000674:	e06e      	b.n	8000754 <HAL_UART_RxCpltCallback+0x19c>
		}
		else if(indexx==indexETX && data==ETX)//After the real data arrives, check if the etx data has arrived, if so, increase the index by one.
 8000676:	4b3c      	ldr	r3, [pc, #240]	@ (8000768 <HAL_UART_RxCpltCallback+0x1b0>)
 8000678:	881a      	ldrh	r2, [r3, #0]
 800067a:	4b3e      	ldr	r3, [pc, #248]	@ (8000774 <HAL_UART_RxCpltCallback+0x1bc>)
 800067c:	881b      	ldrh	r3, [r3, #0]
 800067e:	429a      	cmp	r2, r3
 8000680:	d10a      	bne.n	8000698 <HAL_UART_RxCpltCallback+0xe0>
 8000682:	4b3a      	ldr	r3, [pc, #232]	@ (800076c <HAL_UART_RxCpltCallback+0x1b4>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b03      	cmp	r3, #3
 8000688:	d106      	bne.n	8000698 <HAL_UART_RxCpltCallback+0xe0>
		{
			indexx++;
 800068a:	4b37      	ldr	r3, [pc, #220]	@ (8000768 <HAL_UART_RxCpltCallback+0x1b0>)
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	3301      	adds	r3, #1
 8000690:	b29a      	uxth	r2, r3
 8000692:	4b35      	ldr	r3, [pc, #212]	@ (8000768 <HAL_UART_RxCpltCallback+0x1b0>)
 8000694:	801a      	strh	r2, [r3, #0]
 8000696:	e05d      	b.n	8000754 <HAL_UART_RxCpltCallback+0x19c>
		}
		else if(indexx==indexETX+1)//The accuracy of the message coming after etx is verified according to the crc modbus-16 protocol.
 8000698:	4b33      	ldr	r3, [pc, #204]	@ (8000768 <HAL_UART_RxCpltCallback+0x1b0>)
 800069a:	881b      	ldrh	r3, [r3, #0]
 800069c:	461a      	mov	r2, r3
 800069e:	4b35      	ldr	r3, [pc, #212]	@ (8000774 <HAL_UART_RxCpltCallback+0x1bc>)
 80006a0:	881b      	ldrh	r3, [r3, #0]
 80006a2:	3301      	adds	r3, #1
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d10a      	bne.n	80006be <HAL_UART_RxCpltCallback+0x106>
		{
			crc1=data;
 80006a8:	4b30      	ldr	r3, [pc, #192]	@ (800076c <HAL_UART_RxCpltCallback+0x1b4>)
 80006aa:	781a      	ldrb	r2, [r3, #0]
 80006ac:	4b34      	ldr	r3, [pc, #208]	@ (8000780 <HAL_UART_RxCpltCallback+0x1c8>)
 80006ae:	701a      	strb	r2, [r3, #0]
			indexx++;
 80006b0:	4b2d      	ldr	r3, [pc, #180]	@ (8000768 <HAL_UART_RxCpltCallback+0x1b0>)
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	3301      	adds	r3, #1
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000768 <HAL_UART_RxCpltCallback+0x1b0>)
 80006ba:	801a      	strh	r2, [r3, #0]
 80006bc:	e04a      	b.n	8000754 <HAL_UART_RxCpltCallback+0x19c>
		}
		else if (indexx == indexETX + 2)
 80006be:	4b2a      	ldr	r3, [pc, #168]	@ (8000768 <HAL_UART_RxCpltCallback+0x1b0>)
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	461a      	mov	r2, r3
 80006c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000774 <HAL_UART_RxCpltCallback+0x1bc>)
 80006c6:	881b      	ldrh	r3, [r3, #0]
 80006c8:	3302      	adds	r3, #2
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d10a      	bne.n	80006e4 <HAL_UART_RxCpltCallback+0x12c>
		{
			crc2 = data;
 80006ce:	4b27      	ldr	r3, [pc, #156]	@ (800076c <HAL_UART_RxCpltCallback+0x1b4>)
 80006d0:	781a      	ldrb	r2, [r3, #0]
 80006d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000784 <HAL_UART_RxCpltCallback+0x1cc>)
 80006d4:	701a      	strb	r2, [r3, #0]
			indexx++;
 80006d6:	4b24      	ldr	r3, [pc, #144]	@ (8000768 <HAL_UART_RxCpltCallback+0x1b0>)
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	3301      	adds	r3, #1
 80006dc:	b29a      	uxth	r2, r3
 80006de:	4b22      	ldr	r3, [pc, #136]	@ (8000768 <HAL_UART_RxCpltCallback+0x1b0>)
 80006e0:	801a      	strh	r2, [r3, #0]
 80006e2:	e037      	b.n	8000754 <HAL_UART_RxCpltCallback+0x19c>
		}
		else if (indexx == indexETX + 3&& data==EOT)
 80006e4:	4b20      	ldr	r3, [pc, #128]	@ (8000768 <HAL_UART_RxCpltCallback+0x1b0>)
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b22      	ldr	r3, [pc, #136]	@ (8000774 <HAL_UART_RxCpltCallback+0x1bc>)
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	3303      	adds	r3, #3
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d12c      	bne.n	800074e <HAL_UART_RxCpltCallback+0x196>
 80006f4:	4b1d      	ldr	r3, [pc, #116]	@ (800076c <HAL_UART_RxCpltCallback+0x1b4>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b04      	cmp	r3, #4
 80006fa:	d128      	bne.n	800074e <HAL_UART_RxCpltCallback+0x196>
		{
			crcPAYLOAD = CRC16_Modbus(RXpayload, leng);
 80006fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <HAL_UART_RxCpltCallback+0x1b8>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4619      	mov	r1, r3
 8000702:	481e      	ldr	r0, [pc, #120]	@ (800077c <HAL_UART_RxCpltCallback+0x1c4>)
 8000704:	f7ff fef8 	bl	80004f8 <CRC16_Modbus>
 8000708:	4603      	mov	r3, r0
 800070a:	461a      	mov	r2, r3
 800070c:	4b1e      	ldr	r3, [pc, #120]	@ (8000788 <HAL_UART_RxCpltCallback+0x1d0>)
 800070e:	801a      	strh	r2, [r3, #0]
			crc1_PAYLOAD = crcPAYLOAD >> 8;
 8000710:	4b1d      	ldr	r3, [pc, #116]	@ (8000788 <HAL_UART_RxCpltCallback+0x1d0>)
 8000712:	881b      	ldrh	r3, [r3, #0]
 8000714:	0a1b      	lsrs	r3, r3, #8
 8000716:	b29b      	uxth	r3, r3
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b1c      	ldr	r3, [pc, #112]	@ (800078c <HAL_UART_RxCpltCallback+0x1d4>)
 800071c:	701a      	strb	r2, [r3, #0]
			crc2_PAYLOAD = crcPAYLOAD;
 800071e:	4b1a      	ldr	r3, [pc, #104]	@ (8000788 <HAL_UART_RxCpltCallback+0x1d0>)
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	b2da      	uxtb	r2, r3
 8000724:	4b1a      	ldr	r3, [pc, #104]	@ (8000790 <HAL_UART_RxCpltCallback+0x1d8>)
 8000726:	701a      	strb	r2, [r3, #0]
			if (crc1 == crc1_PAYLOAD && crc2 == crc2_PAYLOAD)
 8000728:	4b15      	ldr	r3, [pc, #84]	@ (8000780 <HAL_UART_RxCpltCallback+0x1c8>)
 800072a:	781a      	ldrb	r2, [r3, #0]
 800072c:	4b17      	ldr	r3, [pc, #92]	@ (800078c <HAL_UART_RxCpltCallback+0x1d4>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	429a      	cmp	r2, r3
 8000732:	d108      	bne.n	8000746 <HAL_UART_RxCpltCallback+0x18e>
 8000734:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <HAL_UART_RxCpltCallback+0x1cc>)
 8000736:	781a      	ldrb	r2, [r3, #0]
 8000738:	4b15      	ldr	r3, [pc, #84]	@ (8000790 <HAL_UART_RxCpltCallback+0x1d8>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	429a      	cmp	r2, r3
 800073e:	d102      	bne.n	8000746 <HAL_UART_RxCpltCallback+0x18e>
			{
				sendPACKET=1;
 8000740:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <HAL_UART_RxCpltCallback+0x1dc>)
 8000742:	2201      	movs	r2, #1
 8000744:	701a      	strb	r2, [r3, #0]
			}
			indexx=0;
 8000746:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <HAL_UART_RxCpltCallback+0x1b0>)
 8000748:	2200      	movs	r2, #0
 800074a:	801a      	strh	r2, [r3, #0]
 800074c:	e002      	b.n	8000754 <HAL_UART_RxCpltCallback+0x19c>
		}
		else
		{
			indexx=0;
 800074e:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <HAL_UART_RxCpltCallback+0x1b0>)
 8000750:	2200      	movs	r2, #0
 8000752:	801a      	strh	r2, [r3, #0]
		}

		 HAL_UART_Receive_IT(&huart1, &data, 1); //	 We get data byte by byte so we don't lose as much data as possible.
 8000754:	2201      	movs	r2, #1
 8000756:	4905      	ldr	r1, [pc, #20]	@ (800076c <HAL_UART_RxCpltCallback+0x1b4>)
 8000758:	480f      	ldr	r0, [pc, #60]	@ (8000798 <HAL_UART_RxCpltCallback+0x1e0>)
 800075a:	f001 ff44 	bl	80025e6 <HAL_UART_Receive_IT>

}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200002b8 	.word	0x200002b8
 800076c:	200000b7 	.word	0x200000b7
 8000770:	200002bc 	.word	0x200002bc
 8000774:	200002be 	.word	0x200002be
 8000778:	200002ba 	.word	0x200002ba
 800077c:	200000b8 	.word	0x200000b8
 8000780:	200000b4 	.word	0x200000b4
 8000784:	200000b5 	.word	0x200000b5
 8000788:	200000b0 	.word	0x200000b0
 800078c:	200000b2 	.word	0x200000b2
 8000790:	200000b3 	.word	0x200000b3
 8000794:	200000b6 	.word	0x200000b6
 8000798:	20000028 	.word	0x20000028

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a2:	f000 fa0a 	bl	8000bba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a6:	f000 f841 	bl	800082c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007aa:	f000 f8dd 	bl	8000968 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007ae:	f000 f8ab 	bl	8000908 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &data, 1);// first time we need to start UART_IT
 80007b2:	2201      	movs	r2, #1
 80007b4:	4916      	ldr	r1, [pc, #88]	@ (8000810 <main+0x74>)
 80007b6:	4817      	ldr	r0, [pc, #92]	@ (8000814 <main+0x78>)
 80007b8:	f001 ff15 	bl	80025e6 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(sendPACKET==1) //if DATA is OK then SEND DATA.
 80007bc:	4b16      	ldr	r3, [pc, #88]	@ (8000818 <main+0x7c>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d1fb      	bne.n	80007bc <main+0x20>
	  {
		  leng1=leng;
 80007c4:	4b15      	ldr	r3, [pc, #84]	@ (800081c <main+0x80>)
 80007c6:	781a      	ldrb	r2, [r3, #0]
 80007c8:	4b15      	ldr	r3, [pc, #84]	@ (8000820 <main+0x84>)
 80007ca:	701a      	strb	r2, [r3, #0]
		  for(int i =0;i<leng1;i++)
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	e00b      	b.n	80007ea <main+0x4e>
		  {
		  TXpayload[i]=RXpayload[i];
 80007d2:	4a14      	ldr	r2, [pc, #80]	@ (8000824 <main+0x88>)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4413      	add	r3, r2
 80007d8:	7819      	ldrb	r1, [r3, #0]
 80007da:	4a13      	ldr	r2, [pc, #76]	@ (8000828 <main+0x8c>)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4413      	add	r3, r2
 80007e0:	460a      	mov	r2, r1
 80007e2:	701a      	strb	r2, [r3, #0]
		  for(int i =0;i<leng1;i++)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3301      	adds	r3, #1
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000820 <main+0x84>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	461a      	mov	r2, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4293      	cmp	r3, r2
 80007f4:	dbed      	blt.n	80007d2 <main+0x36>
		  }
		  HAL_UART_Transmit(&huart1, TXpayload,  leng1, 500);
 80007f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000820 <main+0x84>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000800:	4909      	ldr	r1, [pc, #36]	@ (8000828 <main+0x8c>)
 8000802:	4804      	ldr	r0, [pc, #16]	@ (8000814 <main+0x78>)
 8000804:	f001 fe66 	bl	80024d4 <HAL_UART_Transmit>
		  sendPACKET=0;
 8000808:	4b03      	ldr	r3, [pc, #12]	@ (8000818 <main+0x7c>)
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]
	  if(sendPACKET==1) //if DATA is OK then SEND DATA.
 800080e:	e7d5      	b.n	80007bc <main+0x20>
 8000810:	200000b7 	.word	0x200000b7
 8000814:	20000028 	.word	0x20000028
 8000818:	200000b6 	.word	0x200000b6
 800081c:	200002bc 	.word	0x200002bc
 8000820:	200002bd 	.word	0x200002bd
 8000824:	200000b8 	.word	0x200000b8
 8000828:	200001b8 	.word	0x200001b8

0800082c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b094      	sub	sp, #80	@ 0x50
 8000830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000832:	f107 0320 	add.w	r3, r7, #32
 8000836:	2230      	movs	r2, #48	@ 0x30
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f003 f8e6 	bl	8003a0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000850:	4b2b      	ldr	r3, [pc, #172]	@ (8000900 <SystemClock_Config+0xd4>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000854:	4a2a      	ldr	r2, [pc, #168]	@ (8000900 <SystemClock_Config+0xd4>)
 8000856:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800085a:	6413      	str	r3, [r2, #64]	@ 0x40
 800085c:	4b28      	ldr	r3, [pc, #160]	@ (8000900 <SystemClock_Config+0xd4>)
 800085e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000860:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000868:	4b26      	ldr	r3, [pc, #152]	@ (8000904 <SystemClock_Config+0xd8>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a25      	ldr	r2, [pc, #148]	@ (8000904 <SystemClock_Config+0xd8>)
 800086e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000872:	6013      	str	r3, [r2, #0]
 8000874:	4b23      	ldr	r3, [pc, #140]	@ (8000904 <SystemClock_Config+0xd8>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000880:	2301      	movs	r3, #1
 8000882:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000884:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088a:	2302      	movs	r3, #2
 800088c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800088e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000892:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000894:	2319      	movs	r3, #25
 8000896:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000898:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 800089c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800089e:	2302      	movs	r3, #2
 80008a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a6:	f107 0320 	add.w	r3, r7, #32
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 fd82 	bl	80013b4 <HAL_RCC_OscConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80008b6:	f000 f87b 	bl	80009b0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008ba:	f000 fd2b 	bl	8001314 <HAL_PWREx_EnableOverDrive>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80008c4:	f000 f874 	bl	80009b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c8:	230f      	movs	r3, #15
 80008ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008cc:	2302      	movs	r3, #2
 80008ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008d4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	2107      	movs	r1, #7
 80008e6:	4618      	mov	r0, r3
 80008e8:	f001 f808 	bl	80018fc <HAL_RCC_ClockConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008f2:	f000 f85d 	bl	80009b0 <Error_Handler>
  }
}
 80008f6:	bf00      	nop
 80008f8:	3750      	adds	r7, #80	@ 0x50
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800
 8000904:	40007000 	.word	0x40007000

08000908 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800090c:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <MX_USART1_UART_Init+0x58>)
 800090e:	4a15      	ldr	r2, [pc, #84]	@ (8000964 <MX_USART1_UART_Init+0x5c>)
 8000910:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000912:	4b13      	ldr	r3, [pc, #76]	@ (8000960 <MX_USART1_UART_Init+0x58>)
 8000914:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000918:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800091a:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <MX_USART1_UART_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000920:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <MX_USART1_UART_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000926:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <MX_USART1_UART_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800092c:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <MX_USART1_UART_Init+0x58>)
 800092e:	220c      	movs	r2, #12
 8000930:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000932:	4b0b      	ldr	r3, [pc, #44]	@ (8000960 <MX_USART1_UART_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000938:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <MX_USART1_UART_Init+0x58>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800093e:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <MX_USART1_UART_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000944:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <MX_USART1_UART_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800094a:	4805      	ldr	r0, [pc, #20]	@ (8000960 <MX_USART1_UART_Init+0x58>)
 800094c:	f001 fd74 	bl	8002438 <HAL_UART_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000956:	f000 f82b 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000028 	.word	0x20000028
 8000964:	40011000 	.word	0x40011000

08000968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096e:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <MX_GPIO_Init+0x44>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a0e      	ldr	r2, [pc, #56]	@ (80009ac <MX_GPIO_Init+0x44>)
 8000974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <MX_GPIO_Init+0x44>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <MX_GPIO_Init+0x44>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a08      	ldr	r2, [pc, #32]	@ (80009ac <MX_GPIO_Init+0x44>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <MX_GPIO_Init+0x44>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]

}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800

080009b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b4:	b672      	cpsid	i
}
 80009b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <Error_Handler+0x8>

080009bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a00 <HAL_MspInit+0x44>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000a00 <HAL_MspInit+0x44>)
 80009c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000a00 <HAL_MspInit+0x44>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <HAL_MspInit+0x44>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009de:	4a08      	ldr	r2, [pc, #32]	@ (8000a00 <HAL_MspInit+0x44>)
 80009e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009e6:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <HAL_MspInit+0x44>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800

08000a04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b0aa      	sub	sp, #168	@ 0xa8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a1c:	f107 0310 	add.w	r3, r7, #16
 8000a20:	2284      	movs	r2, #132	@ 0x84
 8000a22:	2100      	movs	r1, #0
 8000a24:	4618      	mov	r0, r3
 8000a26:	f002 fff1 	bl	8003a0c <memset>
  if(huart->Instance==USART1)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a25      	ldr	r2, [pc, #148]	@ (8000ac4 <HAL_UART_MspInit+0xc0>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d143      	bne.n	8000abc <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a34:	2340      	movs	r3, #64	@ 0x40
 8000a36:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	4618      	mov	r0, r3
 8000a42:	f001 f941 	bl	8001cc8 <HAL_RCCEx_PeriphCLKConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a4c:	f7ff ffb0 	bl	80009b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a50:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac8 <HAL_UART_MspInit+0xc4>)
 8000a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a54:	4a1c      	ldr	r2, [pc, #112]	@ (8000ac8 <HAL_UART_MspInit+0xc4>)
 8000a56:	f043 0310 	orr.w	r3, r3, #16
 8000a5a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac8 <HAL_UART_MspInit+0xc4>)
 8000a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a60:	f003 0310 	and.w	r3, r3, #16
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a68:	4b17      	ldr	r3, [pc, #92]	@ (8000ac8 <HAL_UART_MspInit+0xc4>)
 8000a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6c:	4a16      	ldr	r2, [pc, #88]	@ (8000ac8 <HAL_UART_MspInit+0xc4>)
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a74:	4b14      	ldr	r3, [pc, #80]	@ (8000ac8 <HAL_UART_MspInit+0xc4>)
 8000a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a80:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a84:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a94:	2303      	movs	r3, #3
 8000a96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a9a:	2307      	movs	r3, #7
 8000a9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4809      	ldr	r0, [pc, #36]	@ (8000acc <HAL_UART_MspInit+0xc8>)
 8000aa8:	f000 fa88 	bl	8000fbc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2025      	movs	r0, #37	@ 0x25
 8000ab2:	f000 f9ba 	bl	8000e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ab6:	2025      	movs	r0, #37	@ 0x25
 8000ab8:	f000 f9d3 	bl	8000e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000abc:	bf00      	nop
 8000abe:	37a8      	adds	r7, #168	@ 0xa8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40011000 	.word	0x40011000
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40020000 	.word	0x40020000

08000ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <NMI_Handler+0x4>

08000ad8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <BusFault_Handler+0x4>

08000af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <UsageFault_Handler+0x4>

08000af8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b26:	f000 f885 	bl	8000c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b34:	4802      	ldr	r0, [pc, #8]	@ (8000b40 <USART1_IRQHandler+0x10>)
 8000b36:	f001 fd9b 	bl	8002670 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000028 	.word	0x20000028

08000b44 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b48:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <SystemInit+0x20>)
 8000b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b4e:	4a05      	ldr	r2, [pc, #20]	@ (8000b64 <SystemInit+0x20>)
 8000b50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ba0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b6c:	f7ff ffea 	bl	8000b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b70:	480c      	ldr	r0, [pc, #48]	@ (8000ba4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b72:	490d      	ldr	r1, [pc, #52]	@ (8000ba8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b74:	4a0d      	ldr	r2, [pc, #52]	@ (8000bac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b78:	e002      	b.n	8000b80 <LoopCopyDataInit>

08000b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7e:	3304      	adds	r3, #4

08000b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b84:	d3f9      	bcc.n	8000b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b86:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b88:	4c0a      	ldr	r4, [pc, #40]	@ (8000bb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b8c:	e001      	b.n	8000b92 <LoopFillZerobss>

08000b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b90:	3204      	adds	r2, #4

08000b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b94:	d3fb      	bcc.n	8000b8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b96:	f002 ff41 	bl	8003a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b9a:	f7ff fdff 	bl	800079c <main>
  bx  lr    
 8000b9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ba0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bac:	08003aa4 	.word	0x08003aa4
  ldr r2, =_sbss
 8000bb0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bb4:	200002c4 	.word	0x200002c4

08000bb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb8:	e7fe      	b.n	8000bb8 <ADC_IRQHandler>

08000bba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bbe:	2003      	movs	r0, #3
 8000bc0:	f000 f928 	bl	8000e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bc4:	200f      	movs	r0, #15
 8000bc6:	f000 f805 	bl	8000bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bca:	f7ff fef7 	bl	80009bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bce:	2300      	movs	r3, #0
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bdc:	4b12      	ldr	r3, [pc, #72]	@ (8000c28 <HAL_InitTick+0x54>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b12      	ldr	r3, [pc, #72]	@ (8000c2c <HAL_InitTick+0x58>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4619      	mov	r1, r3
 8000be6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 f943 	bl	8000e7e <HAL_SYSTICK_Config>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00e      	b.n	8000c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b0f      	cmp	r3, #15
 8000c06:	d80a      	bhi.n	8000c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	f000 f90b 	bl	8000e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c14:	4a06      	ldr	r2, [pc, #24]	@ (8000c30 <HAL_InitTick+0x5c>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e000      	b.n	8000c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	20000004 	.word	0x20000004

08000c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c38:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <HAL_IncTick+0x20>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <HAL_IncTick+0x24>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a04      	ldr	r2, [pc, #16]	@ (8000c58 <HAL_IncTick+0x24>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000008 	.word	0x20000008
 8000c58:	200002c0 	.word	0x200002c0

08000c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c60:	4b03      	ldr	r3, [pc, #12]	@ (8000c70 <HAL_GetTick+0x14>)
 8000c62:	681b      	ldr	r3, [r3, #0]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	200002c0 	.word	0x200002c0

08000c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c84:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb4 <__NVIC_SetPriorityGrouping+0x40>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c90:	4013      	ands	r3, r2
 8000c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c9c:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca2:	4a04      	ldr	r2, [pc, #16]	@ (8000cb4 <__NVIC_SetPriorityGrouping+0x40>)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	60d3      	str	r3, [r2, #12]
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00
 8000cb8:	05fa0000 	.word	0x05fa0000

08000cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc0:	4b04      	ldr	r3, [pc, #16]	@ (8000cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	f003 0307 	and.w	r3, r3, #7
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db0b      	blt.n	8000d02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	f003 021f 	and.w	r2, r3, #31
 8000cf0:	4907      	ldr	r1, [pc, #28]	@ (8000d10 <__NVIC_EnableIRQ+0x38>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	095b      	lsrs	r3, r3, #5
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000e100 	.word	0xe000e100

08000d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	6039      	str	r1, [r7, #0]
 8000d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	db0a      	blt.n	8000d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	490c      	ldr	r1, [pc, #48]	@ (8000d60 <__NVIC_SetPriority+0x4c>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	0112      	lsls	r2, r2, #4
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	440b      	add	r3, r1
 8000d38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d3c:	e00a      	b.n	8000d54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4908      	ldr	r1, [pc, #32]	@ (8000d64 <__NVIC_SetPriority+0x50>)
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	f003 030f 	and.w	r3, r3, #15
 8000d4a:	3b04      	subs	r3, #4
 8000d4c:	0112      	lsls	r2, r2, #4
 8000d4e:	b2d2      	uxtb	r2, r2
 8000d50:	440b      	add	r3, r1
 8000d52:	761a      	strb	r2, [r3, #24]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000e100 	.word	0xe000e100
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b089      	sub	sp, #36	@ 0x24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f1c3 0307 	rsb	r3, r3, #7
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	bf28      	it	cs
 8000d86:	2304      	movcs	r3, #4
 8000d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	2b06      	cmp	r3, #6
 8000d90:	d902      	bls.n	8000d98 <NVIC_EncodePriority+0x30>
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3b03      	subs	r3, #3
 8000d96:	e000      	b.n	8000d9a <NVIC_EncodePriority+0x32>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43da      	mvns	r2, r3
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	401a      	ands	r2, r3
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db0:	f04f 31ff 	mov.w	r1, #4294967295
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	43d9      	mvns	r1, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	4313      	orrs	r3, r2
         );
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3724      	adds	r7, #36	@ 0x24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
	...

08000dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000de0:	d301      	bcc.n	8000de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de2:	2301      	movs	r3, #1
 8000de4:	e00f      	b.n	8000e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e10 <SysTick_Config+0x40>)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dee:	210f      	movs	r1, #15
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295
 8000df4:	f7ff ff8e 	bl	8000d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df8:	4b05      	ldr	r3, [pc, #20]	@ (8000e10 <SysTick_Config+0x40>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dfe:	4b04      	ldr	r3, [pc, #16]	@ (8000e10 <SysTick_Config+0x40>)
 8000e00:	2207      	movs	r2, #7
 8000e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	e000e010 	.word	0xe000e010

08000e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff ff29 	bl	8000c74 <__NVIC_SetPriorityGrouping>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b086      	sub	sp, #24
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	4603      	mov	r3, r0
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607a      	str	r2, [r7, #4]
 8000e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e3c:	f7ff ff3e 	bl	8000cbc <__NVIC_GetPriorityGrouping>
 8000e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	68b9      	ldr	r1, [r7, #8]
 8000e46:	6978      	ldr	r0, [r7, #20]
 8000e48:	f7ff ff8e 	bl	8000d68 <NVIC_EncodePriority>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e52:	4611      	mov	r1, r2
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff5d 	bl	8000d14 <__NVIC_SetPriority>
}
 8000e5a:	bf00      	nop
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ff31 	bl	8000cd8 <__NVIC_EnableIRQ>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ffa2 	bl	8000dd0 <SysTick_Config>
 8000e8c:	4603      	mov	r3, r0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b084      	sub	sp, #16
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ea2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000ea4:	f7ff feda 	bl	8000c5c <HAL_GetTick>
 8000ea8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d008      	beq.n	8000ec8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2280      	movs	r2, #128	@ 0x80
 8000eba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e052      	b.n	8000f6e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f022 0216 	bic.w	r2, r2, #22
 8000ed6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	695a      	ldr	r2, [r3, #20]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ee6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d103      	bne.n	8000ef8 <HAL_DMA_Abort+0x62>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d007      	beq.n	8000f08 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f022 0208 	bic.w	r2, r2, #8
 8000f06:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f022 0201 	bic.w	r2, r2, #1
 8000f16:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f18:	e013      	b.n	8000f42 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f1a:	f7ff fe9f 	bl	8000c5c <HAL_GetTick>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	2b05      	cmp	r3, #5
 8000f26:	d90c      	bls.n	8000f42 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2220      	movs	r2, #32
 8000f2c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2203      	movs	r2, #3
 8000f32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e015      	b.n	8000f6e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1e4      	bne.n	8000f1a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f54:	223f      	movs	r2, #63	@ 0x3f
 8000f56:	409a      	lsls	r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d004      	beq.n	8000f94 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2280      	movs	r2, #128	@ 0x80
 8000f8e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e00c      	b.n	8000fae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2205      	movs	r2, #5
 8000f98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f022 0201 	bic.w	r2, r2, #1
 8000faa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
	...

08000fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b089      	sub	sp, #36	@ 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
 8000fda:	e175      	b.n	80012c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000fdc:	2201      	movs	r2, #1
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	f040 8164 	bne.w	80012c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 0303 	and.w	r3, r3, #3
 8001002:	2b01      	cmp	r3, #1
 8001004:	d005      	beq.n	8001012 <HAL_GPIO_Init+0x56>
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d130      	bne.n	8001074 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	2203      	movs	r2, #3
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4013      	ands	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	68da      	ldr	r2, [r3, #12]
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001048:	2201      	movs	r2, #1
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	091b      	lsrs	r3, r3, #4
 800105e:	f003 0201 	and.w	r2, r3, #1
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	2b03      	cmp	r3, #3
 800107e:	d017      	beq.n	80010b0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	2203      	movs	r2, #3
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	689a      	ldr	r2, [r3, #8]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d123      	bne.n	8001104 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	08da      	lsrs	r2, r3, #3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3208      	adds	r2, #8
 80010c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	f003 0307 	and.w	r3, r3, #7
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	220f      	movs	r2, #15
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	691a      	ldr	r2, [r3, #16]
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	08da      	lsrs	r2, r3, #3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3208      	adds	r2, #8
 80010fe:	69b9      	ldr	r1, [r7, #24]
 8001100:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	2203      	movs	r2, #3
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f003 0203 	and.w	r2, r3, #3
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001140:	2b00      	cmp	r3, #0
 8001142:	f000 80be 	beq.w	80012c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001146:	4b66      	ldr	r3, [pc, #408]	@ (80012e0 <HAL_GPIO_Init+0x324>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114a:	4a65      	ldr	r2, [pc, #404]	@ (80012e0 <HAL_GPIO_Init+0x324>)
 800114c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001150:	6453      	str	r3, [r2, #68]	@ 0x44
 8001152:	4b63      	ldr	r3, [pc, #396]	@ (80012e0 <HAL_GPIO_Init+0x324>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001156:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800115e:	4a61      	ldr	r2, [pc, #388]	@ (80012e4 <HAL_GPIO_Init+0x328>)
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	089b      	lsrs	r3, r3, #2
 8001164:	3302      	adds	r3, #2
 8001166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	220f      	movs	r2, #15
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a58      	ldr	r2, [pc, #352]	@ (80012e8 <HAL_GPIO_Init+0x32c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d037      	beq.n	80011fa <HAL_GPIO_Init+0x23e>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a57      	ldr	r2, [pc, #348]	@ (80012ec <HAL_GPIO_Init+0x330>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d031      	beq.n	80011f6 <HAL_GPIO_Init+0x23a>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a56      	ldr	r2, [pc, #344]	@ (80012f0 <HAL_GPIO_Init+0x334>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d02b      	beq.n	80011f2 <HAL_GPIO_Init+0x236>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a55      	ldr	r2, [pc, #340]	@ (80012f4 <HAL_GPIO_Init+0x338>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d025      	beq.n	80011ee <HAL_GPIO_Init+0x232>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a54      	ldr	r2, [pc, #336]	@ (80012f8 <HAL_GPIO_Init+0x33c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d01f      	beq.n	80011ea <HAL_GPIO_Init+0x22e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a53      	ldr	r2, [pc, #332]	@ (80012fc <HAL_GPIO_Init+0x340>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d019      	beq.n	80011e6 <HAL_GPIO_Init+0x22a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a52      	ldr	r2, [pc, #328]	@ (8001300 <HAL_GPIO_Init+0x344>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d013      	beq.n	80011e2 <HAL_GPIO_Init+0x226>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a51      	ldr	r2, [pc, #324]	@ (8001304 <HAL_GPIO_Init+0x348>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d00d      	beq.n	80011de <HAL_GPIO_Init+0x222>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a50      	ldr	r2, [pc, #320]	@ (8001308 <HAL_GPIO_Init+0x34c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d007      	beq.n	80011da <HAL_GPIO_Init+0x21e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4f      	ldr	r2, [pc, #316]	@ (800130c <HAL_GPIO_Init+0x350>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d101      	bne.n	80011d6 <HAL_GPIO_Init+0x21a>
 80011d2:	2309      	movs	r3, #9
 80011d4:	e012      	b.n	80011fc <HAL_GPIO_Init+0x240>
 80011d6:	230a      	movs	r3, #10
 80011d8:	e010      	b.n	80011fc <HAL_GPIO_Init+0x240>
 80011da:	2308      	movs	r3, #8
 80011dc:	e00e      	b.n	80011fc <HAL_GPIO_Init+0x240>
 80011de:	2307      	movs	r3, #7
 80011e0:	e00c      	b.n	80011fc <HAL_GPIO_Init+0x240>
 80011e2:	2306      	movs	r3, #6
 80011e4:	e00a      	b.n	80011fc <HAL_GPIO_Init+0x240>
 80011e6:	2305      	movs	r3, #5
 80011e8:	e008      	b.n	80011fc <HAL_GPIO_Init+0x240>
 80011ea:	2304      	movs	r3, #4
 80011ec:	e006      	b.n	80011fc <HAL_GPIO_Init+0x240>
 80011ee:	2303      	movs	r3, #3
 80011f0:	e004      	b.n	80011fc <HAL_GPIO_Init+0x240>
 80011f2:	2302      	movs	r3, #2
 80011f4:	e002      	b.n	80011fc <HAL_GPIO_Init+0x240>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <HAL_GPIO_Init+0x240>
 80011fa:	2300      	movs	r3, #0
 80011fc:	69fa      	ldr	r2, [r7, #28]
 80011fe:	f002 0203 	and.w	r2, r2, #3
 8001202:	0092      	lsls	r2, r2, #2
 8001204:	4093      	lsls	r3, r2
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800120c:	4935      	ldr	r1, [pc, #212]	@ (80012e4 <HAL_GPIO_Init+0x328>)
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	089b      	lsrs	r3, r3, #2
 8001212:	3302      	adds	r3, #2
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800121a:	4b3d      	ldr	r3, [pc, #244]	@ (8001310 <HAL_GPIO_Init+0x354>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800123e:	4a34      	ldr	r2, [pc, #208]	@ (8001310 <HAL_GPIO_Init+0x354>)
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001244:	4b32      	ldr	r3, [pc, #200]	@ (8001310 <HAL_GPIO_Init+0x354>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d003      	beq.n	8001268 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001268:	4a29      	ldr	r2, [pc, #164]	@ (8001310 <HAL_GPIO_Init+0x354>)
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800126e:	4b28      	ldr	r3, [pc, #160]	@ (8001310 <HAL_GPIO_Init+0x354>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	43db      	mvns	r3, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4013      	ands	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001292:	4a1f      	ldr	r2, [pc, #124]	@ (8001310 <HAL_GPIO_Init+0x354>)
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001298:	4b1d      	ldr	r3, [pc, #116]	@ (8001310 <HAL_GPIO_Init+0x354>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012bc:	4a14      	ldr	r2, [pc, #80]	@ (8001310 <HAL_GPIO_Init+0x354>)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3301      	adds	r3, #1
 80012c6:	61fb      	str	r3, [r7, #28]
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	2b0f      	cmp	r3, #15
 80012cc:	f67f ae86 	bls.w	8000fdc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	3724      	adds	r7, #36	@ 0x24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40013800 	.word	0x40013800
 80012e8:	40020000 	.word	0x40020000
 80012ec:	40020400 	.word	0x40020400
 80012f0:	40020800 	.word	0x40020800
 80012f4:	40020c00 	.word	0x40020c00
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40021400 	.word	0x40021400
 8001300:	40021800 	.word	0x40021800
 8001304:	40021c00 	.word	0x40021c00
 8001308:	40022000 	.word	0x40022000
 800130c:	40022400 	.word	0x40022400
 8001310:	40013c00 	.word	0x40013c00

08001314 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800131e:	4b23      	ldr	r3, [pc, #140]	@ (80013ac <HAL_PWREx_EnableOverDrive+0x98>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001322:	4a22      	ldr	r2, [pc, #136]	@ (80013ac <HAL_PWREx_EnableOverDrive+0x98>)
 8001324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001328:	6413      	str	r3, [r2, #64]	@ 0x40
 800132a:	4b20      	ldr	r3, [pc, #128]	@ (80013ac <HAL_PWREx_EnableOverDrive+0x98>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001336:	4b1e      	ldr	r3, [pc, #120]	@ (80013b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a1d      	ldr	r2, [pc, #116]	@ (80013b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800133c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001340:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001342:	f7ff fc8b 	bl	8000c5c <HAL_GetTick>
 8001346:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001348:	e009      	b.n	800135e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800134a:	f7ff fc87 	bl	8000c5c <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001358:	d901      	bls.n	800135e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e022      	b.n	80013a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800135e:	4b14      	ldr	r3, [pc, #80]	@ (80013b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001366:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800136a:	d1ee      	bne.n	800134a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800136c:	4b10      	ldr	r3, [pc, #64]	@ (80013b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a0f      	ldr	r2, [pc, #60]	@ (80013b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001372:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001376:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001378:	f7ff fc70 	bl	8000c5c <HAL_GetTick>
 800137c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800137e:	e009      	b.n	8001394 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001380:	f7ff fc6c 	bl	8000c5c <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800138e:	d901      	bls.n	8001394 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e007      	b.n	80013a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800139c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80013a0:	d1ee      	bne.n	8001380 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40007000 	.word	0x40007000

080013b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80013bc:	2300      	movs	r3, #0
 80013be:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e291      	b.n	80018ee <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f000 8087 	beq.w	80014e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013d8:	4b96      	ldr	r3, [pc, #600]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f003 030c 	and.w	r3, r3, #12
 80013e0:	2b04      	cmp	r3, #4
 80013e2:	d00c      	beq.n	80013fe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013e4:	4b93      	ldr	r3, [pc, #588]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 030c 	and.w	r3, r3, #12
 80013ec:	2b08      	cmp	r3, #8
 80013ee:	d112      	bne.n	8001416 <HAL_RCC_OscConfig+0x62>
 80013f0:	4b90      	ldr	r3, [pc, #576]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013fc:	d10b      	bne.n	8001416 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fe:	4b8d      	ldr	r3, [pc, #564]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d06c      	beq.n	80014e4 <HAL_RCC_OscConfig+0x130>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d168      	bne.n	80014e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e26b      	b.n	80018ee <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800141e:	d106      	bne.n	800142e <HAL_RCC_OscConfig+0x7a>
 8001420:	4b84      	ldr	r3, [pc, #528]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a83      	ldr	r2, [pc, #524]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001426:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	e02e      	b.n	800148c <HAL_RCC_OscConfig+0xd8>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d10c      	bne.n	8001450 <HAL_RCC_OscConfig+0x9c>
 8001436:	4b7f      	ldr	r3, [pc, #508]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a7e      	ldr	r2, [pc, #504]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 800143c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	4b7c      	ldr	r3, [pc, #496]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a7b      	ldr	r2, [pc, #492]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001448:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	e01d      	b.n	800148c <HAL_RCC_OscConfig+0xd8>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001458:	d10c      	bne.n	8001474 <HAL_RCC_OscConfig+0xc0>
 800145a:	4b76      	ldr	r3, [pc, #472]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a75      	ldr	r2, [pc, #468]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001460:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	4b73      	ldr	r3, [pc, #460]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a72      	ldr	r2, [pc, #456]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 800146c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	e00b      	b.n	800148c <HAL_RCC_OscConfig+0xd8>
 8001474:	4b6f      	ldr	r3, [pc, #444]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a6e      	ldr	r2, [pc, #440]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 800147a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800147e:	6013      	str	r3, [r2, #0]
 8001480:	4b6c      	ldr	r3, [pc, #432]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a6b      	ldr	r2, [pc, #428]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001486:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800148a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d013      	beq.n	80014bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001494:	f7ff fbe2 	bl	8000c5c <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800149c:	f7ff fbde 	bl	8000c5c <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b64      	cmp	r3, #100	@ 0x64
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e21f      	b.n	80018ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ae:	4b61      	ldr	r3, [pc, #388]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0f0      	beq.n	800149c <HAL_RCC_OscConfig+0xe8>
 80014ba:	e014      	b.n	80014e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014bc:	f7ff fbce 	bl	8000c5c <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c4:	f7ff fbca 	bl	8000c5c <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b64      	cmp	r3, #100	@ 0x64
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e20b      	b.n	80018ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014d6:	4b57      	ldr	r3, [pc, #348]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f0      	bne.n	80014c4 <HAL_RCC_OscConfig+0x110>
 80014e2:	e000      	b.n	80014e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d069      	beq.n	80015c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014f2:	4b50      	ldr	r3, [pc, #320]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 030c 	and.w	r3, r3, #12
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00b      	beq.n	8001516 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014fe:	4b4d      	ldr	r3, [pc, #308]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f003 030c 	and.w	r3, r3, #12
 8001506:	2b08      	cmp	r3, #8
 8001508:	d11c      	bne.n	8001544 <HAL_RCC_OscConfig+0x190>
 800150a:	4b4a      	ldr	r3, [pc, #296]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d116      	bne.n	8001544 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001516:	4b47      	ldr	r3, [pc, #284]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d005      	beq.n	800152e <HAL_RCC_OscConfig+0x17a>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d001      	beq.n	800152e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e1df      	b.n	80018ee <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800152e:	4b41      	ldr	r3, [pc, #260]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	493d      	ldr	r1, [pc, #244]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 800153e:	4313      	orrs	r3, r2
 8001540:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001542:	e040      	b.n	80015c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d023      	beq.n	8001594 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800154c:	4b39      	ldr	r3, [pc, #228]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a38      	ldr	r2, [pc, #224]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff fb80 	bl	8000c5c <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001560:	f7ff fb7c 	bl	8000c5c <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e1bd      	b.n	80018ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001572:	4b30      	ldr	r3, [pc, #192]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f0      	beq.n	8001560 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157e:	4b2d      	ldr	r3, [pc, #180]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	4929      	ldr	r1, [pc, #164]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 800158e:	4313      	orrs	r3, r2
 8001590:	600b      	str	r3, [r1, #0]
 8001592:	e018      	b.n	80015c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001594:	4b27      	ldr	r3, [pc, #156]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a26      	ldr	r2, [pc, #152]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 800159a:	f023 0301 	bic.w	r3, r3, #1
 800159e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a0:	f7ff fb5c 	bl	8000c5c <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a8:	f7ff fb58 	bl	8000c5c <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e199      	b.n	80018ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f0      	bne.n	80015a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d038      	beq.n	8001644 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d019      	beq.n	800160e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015da:	4b16      	ldr	r3, [pc, #88]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 80015dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015de:	4a15      	ldr	r2, [pc, #84]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e6:	f7ff fb39 	bl	8000c5c <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ee:	f7ff fb35 	bl	8000c5c <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e176      	b.n	80018ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001600:	4b0c      	ldr	r3, [pc, #48]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001602:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f0      	beq.n	80015ee <HAL_RCC_OscConfig+0x23a>
 800160c:	e01a      	b.n	8001644 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800160e:	4b09      	ldr	r3, [pc, #36]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001610:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001612:	4a08      	ldr	r2, [pc, #32]	@ (8001634 <HAL_RCC_OscConfig+0x280>)
 8001614:	f023 0301 	bic.w	r3, r3, #1
 8001618:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161a:	f7ff fb1f 	bl	8000c5c <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001620:	e00a      	b.n	8001638 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001622:	f7ff fb1b 	bl	8000c5c <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d903      	bls.n	8001638 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e15c      	b.n	80018ee <HAL_RCC_OscConfig+0x53a>
 8001634:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001638:	4b91      	ldr	r3, [pc, #580]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 800163a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1ee      	bne.n	8001622 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 80a4 	beq.w	800179a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001652:	4b8b      	ldr	r3, [pc, #556]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10d      	bne.n	800167a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	4b88      	ldr	r3, [pc, #544]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001662:	4a87      	ldr	r2, [pc, #540]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 8001664:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001668:	6413      	str	r3, [r2, #64]	@ 0x40
 800166a:	4b85      	ldr	r3, [pc, #532]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001676:	2301      	movs	r3, #1
 8001678:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800167a:	4b82      	ldr	r3, [pc, #520]	@ (8001884 <HAL_RCC_OscConfig+0x4d0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001682:	2b00      	cmp	r3, #0
 8001684:	d118      	bne.n	80016b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001686:	4b7f      	ldr	r3, [pc, #508]	@ (8001884 <HAL_RCC_OscConfig+0x4d0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a7e      	ldr	r2, [pc, #504]	@ (8001884 <HAL_RCC_OscConfig+0x4d0>)
 800168c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001692:	f7ff fae3 	bl	8000c5c <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800169a:	f7ff fadf 	bl	8000c5c <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b64      	cmp	r3, #100	@ 0x64
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e120      	b.n	80018ee <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ac:	4b75      	ldr	r3, [pc, #468]	@ (8001884 <HAL_RCC_OscConfig+0x4d0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0f0      	beq.n	800169a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d106      	bne.n	80016ce <HAL_RCC_OscConfig+0x31a>
 80016c0:	4b6f      	ldr	r3, [pc, #444]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 80016c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c4:	4a6e      	ldr	r2, [pc, #440]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80016cc:	e02d      	b.n	800172a <HAL_RCC_OscConfig+0x376>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10c      	bne.n	80016f0 <HAL_RCC_OscConfig+0x33c>
 80016d6:	4b6a      	ldr	r3, [pc, #424]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 80016d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016da:	4a69      	ldr	r2, [pc, #420]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 80016dc:	f023 0301 	bic.w	r3, r3, #1
 80016e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80016e2:	4b67      	ldr	r3, [pc, #412]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 80016e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016e6:	4a66      	ldr	r2, [pc, #408]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 80016e8:	f023 0304 	bic.w	r3, r3, #4
 80016ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80016ee:	e01c      	b.n	800172a <HAL_RCC_OscConfig+0x376>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2b05      	cmp	r3, #5
 80016f6:	d10c      	bne.n	8001712 <HAL_RCC_OscConfig+0x35e>
 80016f8:	4b61      	ldr	r3, [pc, #388]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 80016fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016fc:	4a60      	ldr	r2, [pc, #384]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 80016fe:	f043 0304 	orr.w	r3, r3, #4
 8001702:	6713      	str	r3, [r2, #112]	@ 0x70
 8001704:	4b5e      	ldr	r3, [pc, #376]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 8001706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001708:	4a5d      	ldr	r2, [pc, #372]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001710:	e00b      	b.n	800172a <HAL_RCC_OscConfig+0x376>
 8001712:	4b5b      	ldr	r3, [pc, #364]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 8001714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001716:	4a5a      	ldr	r2, [pc, #360]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 8001718:	f023 0301 	bic.w	r3, r3, #1
 800171c:	6713      	str	r3, [r2, #112]	@ 0x70
 800171e:	4b58      	ldr	r3, [pc, #352]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 8001720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001722:	4a57      	ldr	r2, [pc, #348]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 8001724:	f023 0304 	bic.w	r3, r3, #4
 8001728:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d015      	beq.n	800175e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001732:	f7ff fa93 	bl	8000c5c <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001738:	e00a      	b.n	8001750 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173a:	f7ff fa8f 	bl	8000c5c <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001748:	4293      	cmp	r3, r2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e0ce      	b.n	80018ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001750:	4b4b      	ldr	r3, [pc, #300]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 8001752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0ee      	beq.n	800173a <HAL_RCC_OscConfig+0x386>
 800175c:	e014      	b.n	8001788 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175e:	f7ff fa7d 	bl	8000c5c <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001764:	e00a      	b.n	800177c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001766:	f7ff fa79 	bl	8000c5c <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001774:	4293      	cmp	r3, r2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e0b8      	b.n	80018ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800177c:	4b40      	ldr	r3, [pc, #256]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 800177e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1ee      	bne.n	8001766 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001788:	7dfb      	ldrb	r3, [r7, #23]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d105      	bne.n	800179a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800178e:	4b3c      	ldr	r3, [pc, #240]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001792:	4a3b      	ldr	r2, [pc, #236]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 8001794:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001798:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f000 80a4 	beq.w	80018ec <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017a4:	4b36      	ldr	r3, [pc, #216]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 030c 	and.w	r3, r3, #12
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d06b      	beq.n	8001888 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d149      	bne.n	800184c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b8:	4b31      	ldr	r3, [pc, #196]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a30      	ldr	r2, [pc, #192]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 80017be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c4:	f7ff fa4a 	bl	8000c5c <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017cc:	f7ff fa46 	bl	8000c5c <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e087      	b.n	80018ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017de:	4b28      	ldr	r3, [pc, #160]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69da      	ldr	r2, [r3, #28]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f8:	019b      	lsls	r3, r3, #6
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001800:	085b      	lsrs	r3, r3, #1
 8001802:	3b01      	subs	r3, #1
 8001804:	041b      	lsls	r3, r3, #16
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800180c:	061b      	lsls	r3, r3, #24
 800180e:	4313      	orrs	r3, r2
 8001810:	4a1b      	ldr	r2, [pc, #108]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 8001812:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001816:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001818:	4b19      	ldr	r3, [pc, #100]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a18      	ldr	r2, [pc, #96]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 800181e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001824:	f7ff fa1a 	bl	8000c5c <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800182c:	f7ff fa16 	bl	8000c5c <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e057      	b.n	80018ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800183e:	4b10      	ldr	r3, [pc, #64]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d0f0      	beq.n	800182c <HAL_RCC_OscConfig+0x478>
 800184a:	e04f      	b.n	80018ec <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184c:	4b0c      	ldr	r3, [pc, #48]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0b      	ldr	r2, [pc, #44]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 8001852:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001858:	f7ff fa00 	bl	8000c5c <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001860:	f7ff f9fc 	bl	8000c5c <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e03d      	b.n	80018ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001872:	4b03      	ldr	r3, [pc, #12]	@ (8001880 <HAL_RCC_OscConfig+0x4cc>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x4ac>
 800187e:	e035      	b.n	80018ec <HAL_RCC_OscConfig+0x538>
 8001880:	40023800 	.word	0x40023800
 8001884:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001888:	4b1b      	ldr	r3, [pc, #108]	@ (80018f8 <HAL_RCC_OscConfig+0x544>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d028      	beq.n	80018e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d121      	bne.n	80018e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d11a      	bne.n	80018e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80018b8:	4013      	ands	r3, r2
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018be:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d111      	bne.n	80018e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ce:	085b      	lsrs	r3, r3, #1
 80018d0:	3b01      	subs	r3, #1
 80018d2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d107      	bne.n	80018e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d001      	beq.n	80018ec <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e000      	b.n	80018ee <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800

080018fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e0d0      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001914:	4b6a      	ldr	r3, [pc, #424]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 030f 	and.w	r3, r3, #15
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d910      	bls.n	8001944 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001922:	4b67      	ldr	r3, [pc, #412]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f023 020f 	bic.w	r2, r3, #15
 800192a:	4965      	ldr	r1, [pc, #404]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	4313      	orrs	r3, r2
 8001930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001932:	4b63      	ldr	r3, [pc, #396]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	429a      	cmp	r2, r3
 800193e:	d001      	beq.n	8001944 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e0b8      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d020      	beq.n	8001992 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	d005      	beq.n	8001968 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800195c:	4b59      	ldr	r3, [pc, #356]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	4a58      	ldr	r2, [pc, #352]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8001962:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001966:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001974:	4b53      	ldr	r3, [pc, #332]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	4a52      	ldr	r2, [pc, #328]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 800197a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800197e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001980:	4b50      	ldr	r3, [pc, #320]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	494d      	ldr	r1, [pc, #308]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 800198e:	4313      	orrs	r3, r2
 8001990:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d040      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d107      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a6:	4b47      	ldr	r3, [pc, #284]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d115      	bne.n	80019de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e07f      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d107      	bne.n	80019ce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019be:	4b41      	ldr	r3, [pc, #260]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d109      	bne.n	80019de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e073      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ce:	4b3d      	ldr	r3, [pc, #244]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e06b      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019de:	4b39      	ldr	r3, [pc, #228]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f023 0203 	bic.w	r2, r3, #3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	4936      	ldr	r1, [pc, #216]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019f0:	f7ff f934 	bl	8000c5c <HAL_GetTick>
 80019f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f6:	e00a      	b.n	8001a0e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f8:	f7ff f930 	bl	8000c5c <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e053      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 020c 	and.w	r2, r3, #12
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d1eb      	bne.n	80019f8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a20:	4b27      	ldr	r3, [pc, #156]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 030f 	and.w	r3, r3, #15
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d210      	bcs.n	8001a50 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2e:	4b24      	ldr	r3, [pc, #144]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f023 020f 	bic.w	r2, r3, #15
 8001a36:	4922      	ldr	r1, [pc, #136]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3e:	4b20      	ldr	r3, [pc, #128]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e032      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d008      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a5c:	4b19      	ldr	r3, [pc, #100]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	4916      	ldr	r1, [pc, #88]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d009      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a7a:	4b12      	ldr	r3, [pc, #72]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	490e      	ldr	r1, [pc, #56]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a8e:	f000 f821 	bl	8001ad4 <HAL_RCC_GetSysClockFreq>
 8001a92:	4602      	mov	r2, r0
 8001a94:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	091b      	lsrs	r3, r3, #4
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	490a      	ldr	r1, [pc, #40]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1cc>)
 8001aa0:	5ccb      	ldrb	r3, [r1, r3]
 8001aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa6:	4a09      	ldr	r2, [pc, #36]	@ (8001acc <HAL_RCC_ClockConfig+0x1d0>)
 8001aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001aaa:	4b09      	ldr	r3, [pc, #36]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1d4>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff f890 	bl	8000bd4 <HAL_InitTick>

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40023c00 	.word	0x40023c00
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	08003a7c 	.word	0x08003a7c
 8001acc:	20000000 	.word	0x20000000
 8001ad0:	20000004 	.word	0x20000004

08001ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ad8:	b090      	sub	sp, #64	@ 0x40
 8001ada:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001aec:	4b59      	ldr	r3, [pc, #356]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0x180>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 030c 	and.w	r3, r3, #12
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d00d      	beq.n	8001b14 <HAL_RCC_GetSysClockFreq+0x40>
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	f200 80a1 	bhi.w	8001c40 <HAL_RCC_GetSysClockFreq+0x16c>
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d002      	beq.n	8001b08 <HAL_RCC_GetSysClockFreq+0x34>
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	d003      	beq.n	8001b0e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b06:	e09b      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b08:	4b53      	ldr	r3, [pc, #332]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b0c:	e09b      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b0e:	4b53      	ldr	r3, [pc, #332]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0x188>)
 8001b10:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b12:	e098      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b14:	4b4f      	ldr	r3, [pc, #316]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b1c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001b1e:	4b4d      	ldr	r3, [pc, #308]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d028      	beq.n	8001b7c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b2a:	4b4a      	ldr	r3, [pc, #296]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	099b      	lsrs	r3, r3, #6
 8001b30:	2200      	movs	r2, #0
 8001b32:	623b      	str	r3, [r7, #32]
 8001b34:	627a      	str	r2, [r7, #36]	@ 0x24
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4b47      	ldr	r3, [pc, #284]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0x188>)
 8001b40:	fb03 f201 	mul.w	r2, r3, r1
 8001b44:	2300      	movs	r3, #0
 8001b46:	fb00 f303 	mul.w	r3, r0, r3
 8001b4a:	4413      	add	r3, r2
 8001b4c:	4a43      	ldr	r2, [pc, #268]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0x188>)
 8001b4e:	fba0 1202 	umull	r1, r2, r0, r2
 8001b52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b54:	460a      	mov	r2, r1
 8001b56:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001b58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b5a:	4413      	add	r3, r2
 8001b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b60:	2200      	movs	r2, #0
 8001b62:	61bb      	str	r3, [r7, #24]
 8001b64:	61fa      	str	r2, [r7, #28]
 8001b66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b6e:	f7fe fb4b 	bl	8000208 <__aeabi_uldivmod>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4613      	mov	r3, r2
 8001b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b7a:	e053      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b7c:	4b35      	ldr	r3, [pc, #212]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	099b      	lsrs	r3, r3, #6
 8001b82:	2200      	movs	r2, #0
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	617a      	str	r2, [r7, #20]
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b8e:	f04f 0b00 	mov.w	fp, #0
 8001b92:	4652      	mov	r2, sl
 8001b94:	465b      	mov	r3, fp
 8001b96:	f04f 0000 	mov.w	r0, #0
 8001b9a:	f04f 0100 	mov.w	r1, #0
 8001b9e:	0159      	lsls	r1, r3, #5
 8001ba0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ba4:	0150      	lsls	r0, r2, #5
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	ebb2 080a 	subs.w	r8, r2, sl
 8001bae:	eb63 090b 	sbc.w	r9, r3, fp
 8001bb2:	f04f 0200 	mov.w	r2, #0
 8001bb6:	f04f 0300 	mov.w	r3, #0
 8001bba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001bbe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001bc2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001bc6:	ebb2 0408 	subs.w	r4, r2, r8
 8001bca:	eb63 0509 	sbc.w	r5, r3, r9
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	00eb      	lsls	r3, r5, #3
 8001bd8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bdc:	00e2      	lsls	r2, r4, #3
 8001bde:	4614      	mov	r4, r2
 8001be0:	461d      	mov	r5, r3
 8001be2:	eb14 030a 	adds.w	r3, r4, sl
 8001be6:	603b      	str	r3, [r7, #0]
 8001be8:	eb45 030b 	adc.w	r3, r5, fp
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bfa:	4629      	mov	r1, r5
 8001bfc:	028b      	lsls	r3, r1, #10
 8001bfe:	4621      	mov	r1, r4
 8001c00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c04:	4621      	mov	r1, r4
 8001c06:	028a      	lsls	r2, r1, #10
 8001c08:	4610      	mov	r0, r2
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c0e:	2200      	movs	r2, #0
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	60fa      	str	r2, [r7, #12]
 8001c14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c18:	f7fe faf6 	bl	8000208 <__aeabi_uldivmod>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4613      	mov	r3, r2
 8001c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001c24:	4b0b      	ldr	r3, [pc, #44]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	0c1b      	lsrs	r3, r3, #16
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	3301      	adds	r3, #1
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001c34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c3e:	e002      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c40:	4b05      	ldr	r3, [pc, #20]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c42:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3740      	adds	r7, #64	@ 0x40
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800
 8001c58:	00f42400 	.word	0x00f42400
 8001c5c:	017d7840 	.word	0x017d7840

08001c60 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c64:	4b03      	ldr	r3, [pc, #12]	@ (8001c74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c66:	681b      	ldr	r3, [r3, #0]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20000000 	.word	0x20000000

08001c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c7c:	f7ff fff0 	bl	8001c60 <HAL_RCC_GetHCLKFreq>
 8001c80:	4602      	mov	r2, r0
 8001c82:	4b05      	ldr	r3, [pc, #20]	@ (8001c98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	0a9b      	lsrs	r3, r3, #10
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	4903      	ldr	r1, [pc, #12]	@ (8001c9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c8e:	5ccb      	ldrb	r3, [r1, r3]
 8001c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	08003a8c 	.word	0x08003a8c

08001ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ca4:	f7ff ffdc 	bl	8001c60 <HAL_RCC_GetHCLKFreq>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	4b05      	ldr	r3, [pc, #20]	@ (8001cc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	0b5b      	lsrs	r3, r3, #13
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	4903      	ldr	r1, [pc, #12]	@ (8001cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cb6:	5ccb      	ldrb	r3, [r1, r3]
 8001cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	08003a8c 	.word	0x08003a8c

08001cc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d012      	beq.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001cf0:	4b69      	ldr	r3, [pc, #420]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	4a68      	ldr	r2, [pc, #416]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cf6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001cfa:	6093      	str	r3, [r2, #8]
 8001cfc:	4b66      	ldr	r3, [pc, #408]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d04:	4964      	ldr	r1, [pc, #400]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001d12:	2301      	movs	r3, #1
 8001d14:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d017      	beq.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d22:	4b5d      	ldr	r3, [pc, #372]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d28:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d30:	4959      	ldr	r1, [pc, #356]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d3c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d40:	d101      	bne.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001d42:	2301      	movs	r3, #1
 8001d44:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d017      	beq.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d5e:	4b4e      	ldr	r3, [pc, #312]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d64:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6c:	494a      	ldr	r1, [pc, #296]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d7c:	d101      	bne.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0320 	and.w	r3, r3, #32
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 808b 	beq.w	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dac:	4b3a      	ldr	r3, [pc, #232]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db0:	4a39      	ldr	r2, [pc, #228]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001db2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001db6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001db8:	4b37      	ldr	r3, [pc, #220]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001dc4:	4b35      	ldr	r3, [pc, #212]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a34      	ldr	r2, [pc, #208]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001dca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dd0:	f7fe ff44 	bl	8000c5c <HAL_GetTick>
 8001dd4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd8:	f7fe ff40 	bl	8000c5c <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b64      	cmp	r3, #100	@ 0x64
 8001de4:	d901      	bls.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e31f      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x762>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001dea:	4b2c      	ldr	r3, [pc, #176]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0f0      	beq.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001df6:	4b28      	ldr	r3, [pc, #160]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dfe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d035      	beq.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d02e      	beq.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e14:	4b20      	ldr	r3, [pc, #128]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e1c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e22:	4a1d      	ldr	r2, [pc, #116]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e28:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e2e:	4a1a      	ldr	r2, [pc, #104]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e34:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001e36:	4a18      	ldr	r2, [pc, #96]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e3c:	4b16      	ldr	r3, [pc, #88]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d114      	bne.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e48:	f7fe ff08 	bl	8000c5c <HAL_GetTick>
 8001e4c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e4e:	e00a      	b.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e50:	f7fe ff04 	bl	8000c5c <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e2e1      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x762>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e66:	4b0c      	ldr	r3, [pc, #48]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0ee      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001e7e:	d111      	bne.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001e80:	4b05      	ldr	r3, [pc, #20]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e8c:	4b04      	ldr	r3, [pc, #16]	@ (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001e8e:	400b      	ands	r3, r1
 8001e90:	4901      	ldr	r1, [pc, #4]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	608b      	str	r3, [r1, #8]
 8001e96:	e00b      	b.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40007000 	.word	0x40007000
 8001ea0:	0ffffcff 	.word	0x0ffffcff
 8001ea4:	4ba8      	ldr	r3, [pc, #672]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	4aa7      	ldr	r2, [pc, #668]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8001eaa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001eae:	6093      	str	r3, [r2, #8]
 8001eb0:	4ba5      	ldr	r3, [pc, #660]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8001eb2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ebc:	49a2      	ldr	r1, [pc, #648]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0310 	and.w	r3, r3, #16
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d010      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001ece:	4b9e      	ldr	r3, [pc, #632]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8001ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ed4:	4a9c      	ldr	r2, [pc, #624]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8001ed6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001eda:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ede:	4b9a      	ldr	r3, [pc, #616]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8001ee0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ee8:	4997      	ldr	r1, [pc, #604]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00a      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001efc:	4b92      	ldr	r3, [pc, #584]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8001efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f02:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f0a:	498f      	ldr	r1, [pc, #572]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00a      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f1e:	4b8a      	ldr	r3, [pc, #552]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8001f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f24:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f2c:	4986      	ldr	r1, [pc, #536]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00a      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f40:	4b81      	ldr	r3, [pc, #516]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8001f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f4e:	497e      	ldr	r1, [pc, #504]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00a      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f62:	4b79      	ldr	r3, [pc, #484]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8001f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f68:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f70:	4975      	ldr	r1, [pc, #468]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00a      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f84:	4b70      	ldr	r3, [pc, #448]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8001f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f8a:	f023 0203 	bic.w	r2, r3, #3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f92:	496d      	ldr	r1, [pc, #436]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00a      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fa6:	4b68      	ldr	r3, [pc, #416]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8001fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fac:	f023 020c 	bic.w	r2, r3, #12
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fb4:	4964      	ldr	r1, [pc, #400]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00a      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fc8:	4b5f      	ldr	r3, [pc, #380]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8001fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fce:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd6:	495c      	ldr	r1, [pc, #368]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00a      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001fea:	4b57      	ldr	r3, [pc, #348]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8001fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ff8:	4953      	ldr	r1, [pc, #332]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00a      	beq.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800200c:	4b4e      	ldr	r3, [pc, #312]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800200e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002012:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800201a:	494b      	ldr	r1, [pc, #300]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800201c:	4313      	orrs	r3, r2
 800201e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00a      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800202e:	4b46      	ldr	r3, [pc, #280]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8002030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002034:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203c:	4942      	ldr	r1, [pc, #264]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800203e:	4313      	orrs	r3, r2
 8002040:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00a      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002050:	4b3d      	ldr	r3, [pc, #244]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002056:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800205e:	493a      	ldr	r1, [pc, #232]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8002060:	4313      	orrs	r3, r2
 8002062:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00a      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002072:	4b35      	ldr	r3, [pc, #212]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8002074:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002078:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002080:	4931      	ldr	r1, [pc, #196]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8002082:	4313      	orrs	r3, r2
 8002084:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00a      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002094:	4b2c      	ldr	r3, [pc, #176]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8002096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800209a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80020a2:	4929      	ldr	r1, [pc, #164]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d011      	beq.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80020b6:	4b24      	ldr	r3, [pc, #144]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80020b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020bc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80020c4:	4920      	ldr	r1, [pc, #128]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80020d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020d4:	d101      	bne.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80020d6:	2301      	movs	r3, #1
 80020d8:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00a      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020e6:	4b18      	ldr	r3, [pc, #96]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80020e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ec:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020f4:	4914      	ldr	r1, [pc, #80]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00b      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002108:	4b0f      	ldr	r3, [pc, #60]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800210a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800210e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002118:	490b      	ldr	r1, [pc, #44]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800211a:	4313      	orrs	r3, r2
 800211c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d006      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 80d8 	beq.w	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x61c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002134:	4b04      	ldr	r3, [pc, #16]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a03      	ldr	r2, [pc, #12]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800213a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800213e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002140:	f7fe fd8c 	bl	8000c5c <HAL_GetTick>
 8002144:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002146:	e00a      	b.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x496>
 8002148:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800214c:	f7fe fd86 	bl	8000c5c <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b64      	cmp	r3, #100	@ 0x64
 8002158:	d901      	bls.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x496>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e165      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800215e:	4ba9      	ldr	r3, [pc, #676]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f0      	bne.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x484>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d021      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800217a:	2b00      	cmp	r3, #0
 800217c:	d11d      	bne.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800217e:	4ba1      	ldr	r3, [pc, #644]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8002180:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002184:	0c1b      	lsrs	r3, r3, #16
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800218c:	4b9d      	ldr	r3, [pc, #628]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800218e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002192:	0e1b      	lsrs	r3, r3, #24
 8002194:	f003 030f 	and.w	r3, r3, #15
 8002198:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	019a      	lsls	r2, r3, #6
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	041b      	lsls	r3, r3, #16
 80021a4:	431a      	orrs	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	061b      	lsls	r3, r3, #24
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	071b      	lsls	r3, r3, #28
 80021b2:	4994      	ldr	r1, [pc, #592]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d004      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80021ce:	d00a      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d02e      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x572>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021e4:	d129      	bne.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x572>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80021e6:	4b87      	ldr	r3, [pc, #540]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80021e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021ec:	0c1b      	lsrs	r3, r3, #16
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80021f4:	4b83      	ldr	r3, [pc, #524]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80021f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021fa:	0f1b      	lsrs	r3, r3, #28
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	019a      	lsls	r2, r3, #6
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	041b      	lsls	r3, r3, #16
 800220c:	431a      	orrs	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	061b      	lsls	r3, r3, #24
 8002214:	431a      	orrs	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	071b      	lsls	r3, r3, #28
 800221a:	497a      	ldr	r1, [pc, #488]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002222:	4b78      	ldr	r3, [pc, #480]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8002224:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002228:	f023 021f 	bic.w	r2, r3, #31
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002230:	3b01      	subs	r3, #1
 8002232:	4974      	ldr	r1, [pc, #464]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8002234:	4313      	orrs	r3, r2
 8002236:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d01d      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002246:	4b6f      	ldr	r3, [pc, #444]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8002248:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800224c:	0e1b      	lsrs	r3, r3, #24
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002254:	4b6b      	ldr	r3, [pc, #428]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8002256:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800225a:	0f1b      	lsrs	r3, r3, #28
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	019a      	lsls	r2, r3, #6
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	041b      	lsls	r3, r3, #16
 800226e:	431a      	orrs	r2, r3
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	061b      	lsls	r3, r3, #24
 8002274:	431a      	orrs	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	071b      	lsls	r3, r3, #28
 800227a:	4962      	ldr	r1, [pc, #392]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d011      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	019a      	lsls	r2, r3, #6
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	041b      	lsls	r3, r3, #16
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	061b      	lsls	r3, r3, #24
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	071b      	lsls	r3, r3, #28
 80022aa:	4956      	ldr	r1, [pc, #344]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80022b2:	4b54      	ldr	r3, [pc, #336]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a53      	ldr	r2, [pc, #332]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80022b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80022bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022be:	f7fe fccd 	bl	8000c5c <HAL_GetTick>
 80022c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80022c4:	e008      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80022c6:	f7fe fcc9 	bl	8000c5c <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b64      	cmp	r3, #100	@ 0x64
 80022d2:	d901      	bls.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e0a8      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80022d8:	4b4a      	ldr	r3, [pc, #296]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0f0      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	f040 809e 	bne.w	8002428 <HAL_RCCEx_PeriphCLKConfig+0x760>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80022ec:	4b45      	ldr	r3, [pc, #276]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a44      	ldr	r2, [pc, #272]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80022f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022f8:	f7fe fcb0 	bl	8000c5c <HAL_GetTick>
 80022fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x64a>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002300:	f7fe fcac 	bl	8000c5c <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b64      	cmp	r3, #100	@ 0x64
 800230c:	d901      	bls.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x64a>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e08b      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002312:	4b3c      	ldr	r3, [pc, #240]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800231a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800231e:	d0ef      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x638>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002330:	2b00      	cmp	r3, #0
 8002332:	d009      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x680>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800233c:	2b00      	cmp	r3, #0
 800233e:	d02e      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002344:	2b00      	cmp	r3, #0
 8002346:	d12a      	bne.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002348:	4b2e      	ldr	r3, [pc, #184]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800234e:	0c1b      	lsrs	r3, r3, #16
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002356:	4b2b      	ldr	r3, [pc, #172]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8002358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800235c:	0f1b      	lsrs	r3, r3, #28
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	019a      	lsls	r2, r3, #6
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	041b      	lsls	r3, r3, #16
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	061b      	lsls	r3, r3, #24
 8002376:	431a      	orrs	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	071b      	lsls	r3, r3, #28
 800237c:	4921      	ldr	r1, [pc, #132]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800237e:	4313      	orrs	r3, r2
 8002380:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002384:	4b1f      	ldr	r3, [pc, #124]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8002386:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800238a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002392:	3b01      	subs	r3, #1
 8002394:	021b      	lsls	r3, r3, #8
 8002396:	491b      	ldr	r1, [pc, #108]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d022      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023b2:	d11d      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80023b4:	4b13      	ldr	r3, [pc, #76]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80023b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ba:	0e1b      	lsrs	r3, r3, #24
 80023bc:	f003 030f 	and.w	r3, r3, #15
 80023c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80023c2:	4b10      	ldr	r3, [pc, #64]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80023c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023c8:	0f1b      	lsrs	r3, r3, #28
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	019a      	lsls	r2, r3, #6
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	041b      	lsls	r3, r3, #16
 80023dc:	431a      	orrs	r2, r3
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	061b      	lsls	r3, r3, #24
 80023e2:	431a      	orrs	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	071b      	lsls	r3, r3, #28
 80023e8:	4906      	ldr	r1, [pc, #24]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80023f0:	4b04      	ldr	r3, [pc, #16]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a03      	ldr	r2, [pc, #12]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80023f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023fc:	f7fe fc2e 	bl	8000c5c <HAL_GetTick>
 8002400:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002402:	e00a      	b.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x752>
 8002404:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002408:	f7fe fc28 	bl	8000c5c <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b64      	cmp	r3, #100	@ 0x64
 8002414:	d901      	bls.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x752>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e007      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800241a:	4b06      	ldr	r3, [pc, #24]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002422:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002426:	d1ef      	bne.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x740>
      }
    }
  }
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3720      	adds	r7, #32
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800

08002438 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e040      	b.n	80024cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800244e:	2b00      	cmp	r3, #0
 8002450:	d106      	bne.n	8002460 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7fe fad2 	bl	8000a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2224      	movs	r2, #36	@ 0x24
 8002464:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0201 	bic.w	r2, r2, #1
 8002474:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247a:	2b00      	cmp	r3, #0
 800247c:	d002      	beq.n	8002484 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 fe4c 	bl	800311c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 fbe5 	bl	8002c54 <UART_SetConfig>
 800248a:	4603      	mov	r3, r0
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e01b      	b.n	80024cc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80024a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80024b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0201 	orr.w	r2, r2, #1
 80024c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 fecb 	bl	8003260 <UART_CheckIdleState>
 80024ca:	4603      	mov	r3, r0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08a      	sub	sp, #40	@ 0x28
 80024d8:	af02      	add	r7, sp, #8
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	603b      	str	r3, [r7, #0]
 80024e0:	4613      	mov	r3, r2
 80024e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024e8:	2b20      	cmp	r3, #32
 80024ea:	d177      	bne.n	80025dc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d002      	beq.n	80024f8 <HAL_UART_Transmit+0x24>
 80024f2:	88fb      	ldrh	r3, [r7, #6]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e070      	b.n	80025de <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2221      	movs	r2, #33	@ 0x21
 8002508:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800250a:	f7fe fba7 	bl	8000c5c <HAL_GetTick>
 800250e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	88fa      	ldrh	r2, [r7, #6]
 8002514:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	88fa      	ldrh	r2, [r7, #6]
 800251c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002528:	d108      	bne.n	800253c <HAL_UART_Transmit+0x68>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d104      	bne.n	800253c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002532:	2300      	movs	r3, #0
 8002534:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	61bb      	str	r3, [r7, #24]
 800253a:	e003      	b.n	8002544 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002540:	2300      	movs	r3, #0
 8002542:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002544:	e02f      	b.n	80025a6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	2200      	movs	r2, #0
 800254e:	2180      	movs	r1, #128	@ 0x80
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 fedc 	bl	800330e <UART_WaitOnFlagUntilTimeout>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d004      	beq.n	8002566 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2220      	movs	r2, #32
 8002560:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e03b      	b.n	80025de <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10b      	bne.n	8002584 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	461a      	mov	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800257a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	3302      	adds	r3, #2
 8002580:	61bb      	str	r3, [r7, #24]
 8002582:	e007      	b.n	8002594 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	781a      	ldrb	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	3301      	adds	r3, #1
 8002592:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800259a:	b29b      	uxth	r3, r3
 800259c:	3b01      	subs	r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1c9      	bne.n	8002546 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	2200      	movs	r2, #0
 80025ba:	2140      	movs	r1, #64	@ 0x40
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 fea6 	bl	800330e <UART_WaitOnFlagUntilTimeout>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d004      	beq.n	80025d2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2220      	movs	r2, #32
 80025cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e005      	b.n	80025de <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2220      	movs	r2, #32
 80025d6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	e000      	b.n	80025de <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80025dc:	2302      	movs	r3, #2
  }
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3720      	adds	r7, #32
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b08a      	sub	sp, #40	@ 0x28
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	4613      	mov	r3, r2
 80025f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025fa:	2b20      	cmp	r3, #32
 80025fc:	d132      	bne.n	8002664 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d002      	beq.n	800260a <HAL_UART_Receive_IT+0x24>
 8002604:	88fb      	ldrh	r3, [r7, #6]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e02b      	b.n	8002666 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d018      	beq.n	8002654 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	e853 3f00 	ldrex	r3, [r3]
 800262e:	613b      	str	r3, [r7, #16]
   return(result);
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002636:	627b      	str	r3, [r7, #36]	@ 0x24
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	461a      	mov	r2, r3
 800263e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002640:	623b      	str	r3, [r7, #32]
 8002642:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002644:	69f9      	ldr	r1, [r7, #28]
 8002646:	6a3a      	ldr	r2, [r7, #32]
 8002648:	e841 2300 	strex	r3, r2, [r1]
 800264c:	61bb      	str	r3, [r7, #24]
   return(result);
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1e6      	bne.n	8002622 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002654:	88fb      	ldrh	r3, [r7, #6]
 8002656:	461a      	mov	r2, r3
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 fec4 	bl	80033e8 <UART_Start_Receive_IT>
 8002660:	4603      	mov	r3, r0
 8002662:	e000      	b.n	8002666 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002664:	2302      	movs	r3, #2
  }
}
 8002666:	4618      	mov	r0, r3
 8002668:	3728      	adds	r7, #40	@ 0x28
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b0ba      	sub	sp, #232	@ 0xe8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002696:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800269a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800269e:	4013      	ands	r3, r2
 80026a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80026a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d115      	bne.n	80026d8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80026ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026b0:	f003 0320 	and.w	r3, r3, #32
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00f      	beq.n	80026d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80026b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026bc:	f003 0320 	and.w	r3, r3, #32
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d009      	beq.n	80026d8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 8297 	beq.w	8002bfc <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	4798      	blx	r3
      }
      return;
 80026d6:	e291      	b.n	8002bfc <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80026d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 8117 	beq.w	8002910 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80026e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d106      	bne.n	80026fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80026ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80026f2:	4b85      	ldr	r3, [pc, #532]	@ (8002908 <HAL_UART_IRQHandler+0x298>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 810a 	beq.w	8002910 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80026fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b00      	cmp	r3, #0
 8002706:	d011      	beq.n	800272c <HAL_UART_IRQHandler+0xbc>
 8002708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800270c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00b      	beq.n	800272c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2201      	movs	r2, #1
 800271a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002722:	f043 0201 	orr.w	r2, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800272c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d011      	beq.n	800275c <HAL_UART_IRQHandler+0xec>
 8002738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00b      	beq.n	800275c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2202      	movs	r2, #2
 800274a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002752:	f043 0204 	orr.w	r2, r3, #4
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800275c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	d011      	beq.n	800278c <HAL_UART_IRQHandler+0x11c>
 8002768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00b      	beq.n	800278c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2204      	movs	r2, #4
 800277a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002782:	f043 0202 	orr.w	r2, r3, #2
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800278c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	2b00      	cmp	r3, #0
 8002796:	d017      	beq.n	80027c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800279c:	f003 0320 	and.w	r3, r3, #32
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d105      	bne.n	80027b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80027a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00b      	beq.n	80027c8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2208      	movs	r2, #8
 80027b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027be:	f043 0208 	orr.w	r2, r3, #8
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80027c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d012      	beq.n	80027fa <HAL_UART_IRQHandler+0x18a>
 80027d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00c      	beq.n	80027fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027f0:	f043 0220 	orr.w	r2, r3, #32
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 81fd 	beq.w	8002c00 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800280a:	f003 0320 	and.w	r3, r3, #32
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00d      	beq.n	800282e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002816:	f003 0320 	and.w	r3, r3, #32
 800281a:	2b00      	cmp	r3, #0
 800281c:	d007      	beq.n	800282e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002834:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002842:	2b40      	cmp	r3, #64	@ 0x40
 8002844:	d005      	beq.n	8002852 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002846:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800284a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800284e:	2b00      	cmp	r3, #0
 8002850:	d04f      	beq.n	80028f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 fe8e 	bl	8003574 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002862:	2b40      	cmp	r3, #64	@ 0x40
 8002864:	d141      	bne.n	80028ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	3308      	adds	r3, #8
 800286c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002870:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002874:	e853 3f00 	ldrex	r3, [r3]
 8002878:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800287c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002880:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002884:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3308      	adds	r3, #8
 800288e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002892:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002896:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800289a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800289e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80028a2:	e841 2300 	strex	r3, r2, [r1]
 80028a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80028aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1d9      	bne.n	8002866 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d013      	beq.n	80028e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028be:	4a13      	ldr	r2, [pc, #76]	@ (800290c <HAL_UART_IRQHandler+0x29c>)
 80028c0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe fb55 	bl	8000f76 <HAL_DMA_Abort_IT>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d017      	beq.n	8002902 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80028dc:	4610      	mov	r0, r2
 80028de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e0:	e00f      	b.n	8002902 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f9a0 	bl	8002c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e8:	e00b      	b.n	8002902 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f99c 	bl	8002c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028f0:	e007      	b.n	8002902 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f998 	bl	8002c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002900:	e17e      	b.n	8002c00 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002902:	bf00      	nop
    return;
 8002904:	e17c      	b.n	8002c00 <HAL_UART_IRQHandler+0x590>
 8002906:	bf00      	nop
 8002908:	04000120 	.word	0x04000120
 800290c:	0800363d 	.word	0x0800363d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002914:	2b01      	cmp	r3, #1
 8002916:	f040 814c 	bne.w	8002bb2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800291a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800291e:	f003 0310 	and.w	r3, r3, #16
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 8145 	beq.w	8002bb2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800292c:	f003 0310 	and.w	r3, r3, #16
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 813e 	beq.w	8002bb2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2210      	movs	r2, #16
 800293c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002948:	2b40      	cmp	r3, #64	@ 0x40
 800294a:	f040 80b6 	bne.w	8002aba <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800295a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 8150 	beq.w	8002c04 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800296a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800296e:	429a      	cmp	r2, r3
 8002970:	f080 8148 	bcs.w	8002c04 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800297a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002988:	f000 8086 	beq.w	8002a98 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002994:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002998:	e853 3f00 	ldrex	r3, [r3]
 800299c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80029a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	461a      	mov	r2, r3
 80029b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80029b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80029ba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80029c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80029c6:	e841 2300 	strex	r3, r2, [r1]
 80029ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80029ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1da      	bne.n	800298c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	3308      	adds	r3, #8
 80029dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029e0:	e853 3f00 	ldrex	r3, [r3]
 80029e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80029e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80029e8:	f023 0301 	bic.w	r3, r3, #1
 80029ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	3308      	adds	r3, #8
 80029f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80029fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80029fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a00:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002a02:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002a06:	e841 2300 	strex	r3, r2, [r1]
 8002a0a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002a0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1e1      	bne.n	80029d6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	3308      	adds	r3, #8
 8002a18:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a1c:	e853 3f00 	ldrex	r3, [r3]
 8002a20:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002a22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	3308      	adds	r3, #8
 8002a32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002a36:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002a38:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002a3c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002a3e:	e841 2300 	strex	r3, r2, [r1]
 8002a42:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002a44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1e3      	bne.n	8002a12 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a60:	e853 3f00 	ldrex	r3, [r3]
 8002a64:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002a66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a68:	f023 0310 	bic.w	r3, r3, #16
 8002a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	461a      	mov	r2, r3
 8002a76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a7a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002a7c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002a80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a82:	e841 2300 	strex	r3, r2, [r1]
 8002a86:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002a88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1e4      	bne.n	8002a58 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe f9ff 	bl	8000e96 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f8c2 	bl	8002c3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ab8:	e0a4      	b.n	8002c04 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 8096 	beq.w	8002c08 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8002adc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 8091 	beq.w	8002c08 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aee:	e853 3f00 	ldrex	r3, [r3]
 8002af2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002af6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002afa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002b08:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b0a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002b0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b10:	e841 2300 	strex	r3, r2, [r1]
 8002b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002b16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1e4      	bne.n	8002ae6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	3308      	adds	r3, #8
 8002b22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b26:	e853 3f00 	ldrex	r3, [r3]
 8002b2a:	623b      	str	r3, [r7, #32]
   return(result);
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	f023 0301 	bic.w	r3, r3, #1
 8002b32:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	3308      	adds	r3, #8
 8002b3c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002b40:	633a      	str	r2, [r7, #48]	@ 0x30
 8002b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b48:	e841 2300 	strex	r3, r2, [r1]
 8002b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1e3      	bne.n	8002b1c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2220      	movs	r2, #32
 8002b58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	e853 3f00 	ldrex	r3, [r3]
 8002b74:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f023 0310 	bic.w	r3, r3, #16
 8002b7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	461a      	mov	r2, r3
 8002b86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b8a:	61fb      	str	r3, [r7, #28]
 8002b8c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8e:	69b9      	ldr	r1, [r7, #24]
 8002b90:	69fa      	ldr	r2, [r7, #28]
 8002b92:	e841 2300 	strex	r3, r2, [r1]
 8002b96:	617b      	str	r3, [r7, #20]
   return(result);
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1e4      	bne.n	8002b68 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ba4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ba8:	4619      	mov	r1, r3
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f846 	bl	8002c3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002bb0:	e02a      	b.n	8002c08 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00e      	beq.n	8002bdc <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002bbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d008      	beq.n	8002bdc <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d01c      	beq.n	8002c0c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	4798      	blx	r3
    }
    return;
 8002bda:	e017      	b.n	8002c0c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d012      	beq.n	8002c0e <HAL_UART_IRQHandler+0x59e>
 8002be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00c      	beq.n	8002c0e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 fd37 	bl	8003668 <UART_EndTransmit_IT>
    return;
 8002bfa:	e008      	b.n	8002c0e <HAL_UART_IRQHandler+0x59e>
      return;
 8002bfc:	bf00      	nop
 8002bfe:	e006      	b.n	8002c0e <HAL_UART_IRQHandler+0x59e>
    return;
 8002c00:	bf00      	nop
 8002c02:	e004      	b.n	8002c0e <HAL_UART_IRQHandler+0x59e>
      return;
 8002c04:	bf00      	nop
 8002c06:	e002      	b.n	8002c0e <HAL_UART_IRQHandler+0x59e>
      return;
 8002c08:	bf00      	nop
 8002c0a:	e000      	b.n	8002c0e <HAL_UART_IRQHandler+0x59e>
    return;
 8002c0c:	bf00      	nop
  }

}
 8002c0e:	37e8      	adds	r7, #232	@ 0xe8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b088      	sub	sp, #32
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	69db      	ldr	r3, [r3, #28]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	4ba6      	ldr	r3, [pc, #664]	@ (8002f18 <UART_SetConfig+0x2c4>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6812      	ldr	r2, [r2, #0]
 8002c86:	6979      	ldr	r1, [r7, #20]
 8002c88:	430b      	orrs	r3, r1
 8002c8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a94      	ldr	r2, [pc, #592]	@ (8002f1c <UART_SetConfig+0x2c8>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d120      	bne.n	8002d12 <UART_SetConfig+0xbe>
 8002cd0:	4b93      	ldr	r3, [pc, #588]	@ (8002f20 <UART_SetConfig+0x2cc>)
 8002cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d816      	bhi.n	8002d0c <UART_SetConfig+0xb8>
 8002cde:	a201      	add	r2, pc, #4	@ (adr r2, 8002ce4 <UART_SetConfig+0x90>)
 8002ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce4:	08002cf5 	.word	0x08002cf5
 8002ce8:	08002d01 	.word	0x08002d01
 8002cec:	08002cfb 	.word	0x08002cfb
 8002cf0:	08002d07 	.word	0x08002d07
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	77fb      	strb	r3, [r7, #31]
 8002cf8:	e150      	b.n	8002f9c <UART_SetConfig+0x348>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	77fb      	strb	r3, [r7, #31]
 8002cfe:	e14d      	b.n	8002f9c <UART_SetConfig+0x348>
 8002d00:	2304      	movs	r3, #4
 8002d02:	77fb      	strb	r3, [r7, #31]
 8002d04:	e14a      	b.n	8002f9c <UART_SetConfig+0x348>
 8002d06:	2308      	movs	r3, #8
 8002d08:	77fb      	strb	r3, [r7, #31]
 8002d0a:	e147      	b.n	8002f9c <UART_SetConfig+0x348>
 8002d0c:	2310      	movs	r3, #16
 8002d0e:	77fb      	strb	r3, [r7, #31]
 8002d10:	e144      	b.n	8002f9c <UART_SetConfig+0x348>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a83      	ldr	r2, [pc, #524]	@ (8002f24 <UART_SetConfig+0x2d0>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d132      	bne.n	8002d82 <UART_SetConfig+0x12e>
 8002d1c:	4b80      	ldr	r3, [pc, #512]	@ (8002f20 <UART_SetConfig+0x2cc>)
 8002d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	2b0c      	cmp	r3, #12
 8002d28:	d828      	bhi.n	8002d7c <UART_SetConfig+0x128>
 8002d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d30 <UART_SetConfig+0xdc>)
 8002d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d30:	08002d65 	.word	0x08002d65
 8002d34:	08002d7d 	.word	0x08002d7d
 8002d38:	08002d7d 	.word	0x08002d7d
 8002d3c:	08002d7d 	.word	0x08002d7d
 8002d40:	08002d71 	.word	0x08002d71
 8002d44:	08002d7d 	.word	0x08002d7d
 8002d48:	08002d7d 	.word	0x08002d7d
 8002d4c:	08002d7d 	.word	0x08002d7d
 8002d50:	08002d6b 	.word	0x08002d6b
 8002d54:	08002d7d 	.word	0x08002d7d
 8002d58:	08002d7d 	.word	0x08002d7d
 8002d5c:	08002d7d 	.word	0x08002d7d
 8002d60:	08002d77 	.word	0x08002d77
 8002d64:	2300      	movs	r3, #0
 8002d66:	77fb      	strb	r3, [r7, #31]
 8002d68:	e118      	b.n	8002f9c <UART_SetConfig+0x348>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	77fb      	strb	r3, [r7, #31]
 8002d6e:	e115      	b.n	8002f9c <UART_SetConfig+0x348>
 8002d70:	2304      	movs	r3, #4
 8002d72:	77fb      	strb	r3, [r7, #31]
 8002d74:	e112      	b.n	8002f9c <UART_SetConfig+0x348>
 8002d76:	2308      	movs	r3, #8
 8002d78:	77fb      	strb	r3, [r7, #31]
 8002d7a:	e10f      	b.n	8002f9c <UART_SetConfig+0x348>
 8002d7c:	2310      	movs	r3, #16
 8002d7e:	77fb      	strb	r3, [r7, #31]
 8002d80:	e10c      	b.n	8002f9c <UART_SetConfig+0x348>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a68      	ldr	r2, [pc, #416]	@ (8002f28 <UART_SetConfig+0x2d4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d120      	bne.n	8002dce <UART_SetConfig+0x17a>
 8002d8c:	4b64      	ldr	r3, [pc, #400]	@ (8002f20 <UART_SetConfig+0x2cc>)
 8002d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d92:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002d96:	2b30      	cmp	r3, #48	@ 0x30
 8002d98:	d013      	beq.n	8002dc2 <UART_SetConfig+0x16e>
 8002d9a:	2b30      	cmp	r3, #48	@ 0x30
 8002d9c:	d814      	bhi.n	8002dc8 <UART_SetConfig+0x174>
 8002d9e:	2b20      	cmp	r3, #32
 8002da0:	d009      	beq.n	8002db6 <UART_SetConfig+0x162>
 8002da2:	2b20      	cmp	r3, #32
 8002da4:	d810      	bhi.n	8002dc8 <UART_SetConfig+0x174>
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d002      	beq.n	8002db0 <UART_SetConfig+0x15c>
 8002daa:	2b10      	cmp	r3, #16
 8002dac:	d006      	beq.n	8002dbc <UART_SetConfig+0x168>
 8002dae:	e00b      	b.n	8002dc8 <UART_SetConfig+0x174>
 8002db0:	2300      	movs	r3, #0
 8002db2:	77fb      	strb	r3, [r7, #31]
 8002db4:	e0f2      	b.n	8002f9c <UART_SetConfig+0x348>
 8002db6:	2302      	movs	r3, #2
 8002db8:	77fb      	strb	r3, [r7, #31]
 8002dba:	e0ef      	b.n	8002f9c <UART_SetConfig+0x348>
 8002dbc:	2304      	movs	r3, #4
 8002dbe:	77fb      	strb	r3, [r7, #31]
 8002dc0:	e0ec      	b.n	8002f9c <UART_SetConfig+0x348>
 8002dc2:	2308      	movs	r3, #8
 8002dc4:	77fb      	strb	r3, [r7, #31]
 8002dc6:	e0e9      	b.n	8002f9c <UART_SetConfig+0x348>
 8002dc8:	2310      	movs	r3, #16
 8002dca:	77fb      	strb	r3, [r7, #31]
 8002dcc:	e0e6      	b.n	8002f9c <UART_SetConfig+0x348>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a56      	ldr	r2, [pc, #344]	@ (8002f2c <UART_SetConfig+0x2d8>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d120      	bne.n	8002e1a <UART_SetConfig+0x1c6>
 8002dd8:	4b51      	ldr	r3, [pc, #324]	@ (8002f20 <UART_SetConfig+0x2cc>)
 8002dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dde:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002de2:	2bc0      	cmp	r3, #192	@ 0xc0
 8002de4:	d013      	beq.n	8002e0e <UART_SetConfig+0x1ba>
 8002de6:	2bc0      	cmp	r3, #192	@ 0xc0
 8002de8:	d814      	bhi.n	8002e14 <UART_SetConfig+0x1c0>
 8002dea:	2b80      	cmp	r3, #128	@ 0x80
 8002dec:	d009      	beq.n	8002e02 <UART_SetConfig+0x1ae>
 8002dee:	2b80      	cmp	r3, #128	@ 0x80
 8002df0:	d810      	bhi.n	8002e14 <UART_SetConfig+0x1c0>
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d002      	beq.n	8002dfc <UART_SetConfig+0x1a8>
 8002df6:	2b40      	cmp	r3, #64	@ 0x40
 8002df8:	d006      	beq.n	8002e08 <UART_SetConfig+0x1b4>
 8002dfa:	e00b      	b.n	8002e14 <UART_SetConfig+0x1c0>
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	77fb      	strb	r3, [r7, #31]
 8002e00:	e0cc      	b.n	8002f9c <UART_SetConfig+0x348>
 8002e02:	2302      	movs	r3, #2
 8002e04:	77fb      	strb	r3, [r7, #31]
 8002e06:	e0c9      	b.n	8002f9c <UART_SetConfig+0x348>
 8002e08:	2304      	movs	r3, #4
 8002e0a:	77fb      	strb	r3, [r7, #31]
 8002e0c:	e0c6      	b.n	8002f9c <UART_SetConfig+0x348>
 8002e0e:	2308      	movs	r3, #8
 8002e10:	77fb      	strb	r3, [r7, #31]
 8002e12:	e0c3      	b.n	8002f9c <UART_SetConfig+0x348>
 8002e14:	2310      	movs	r3, #16
 8002e16:	77fb      	strb	r3, [r7, #31]
 8002e18:	e0c0      	b.n	8002f9c <UART_SetConfig+0x348>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a44      	ldr	r2, [pc, #272]	@ (8002f30 <UART_SetConfig+0x2dc>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d125      	bne.n	8002e70 <UART_SetConfig+0x21c>
 8002e24:	4b3e      	ldr	r3, [pc, #248]	@ (8002f20 <UART_SetConfig+0x2cc>)
 8002e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e32:	d017      	beq.n	8002e64 <UART_SetConfig+0x210>
 8002e34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e38:	d817      	bhi.n	8002e6a <UART_SetConfig+0x216>
 8002e3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e3e:	d00b      	beq.n	8002e58 <UART_SetConfig+0x204>
 8002e40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e44:	d811      	bhi.n	8002e6a <UART_SetConfig+0x216>
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <UART_SetConfig+0x1fe>
 8002e4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e4e:	d006      	beq.n	8002e5e <UART_SetConfig+0x20a>
 8002e50:	e00b      	b.n	8002e6a <UART_SetConfig+0x216>
 8002e52:	2300      	movs	r3, #0
 8002e54:	77fb      	strb	r3, [r7, #31]
 8002e56:	e0a1      	b.n	8002f9c <UART_SetConfig+0x348>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	77fb      	strb	r3, [r7, #31]
 8002e5c:	e09e      	b.n	8002f9c <UART_SetConfig+0x348>
 8002e5e:	2304      	movs	r3, #4
 8002e60:	77fb      	strb	r3, [r7, #31]
 8002e62:	e09b      	b.n	8002f9c <UART_SetConfig+0x348>
 8002e64:	2308      	movs	r3, #8
 8002e66:	77fb      	strb	r3, [r7, #31]
 8002e68:	e098      	b.n	8002f9c <UART_SetConfig+0x348>
 8002e6a:	2310      	movs	r3, #16
 8002e6c:	77fb      	strb	r3, [r7, #31]
 8002e6e:	e095      	b.n	8002f9c <UART_SetConfig+0x348>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a2f      	ldr	r2, [pc, #188]	@ (8002f34 <UART_SetConfig+0x2e0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d125      	bne.n	8002ec6 <UART_SetConfig+0x272>
 8002e7a:	4b29      	ldr	r3, [pc, #164]	@ (8002f20 <UART_SetConfig+0x2cc>)
 8002e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e80:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002e84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002e88:	d017      	beq.n	8002eba <UART_SetConfig+0x266>
 8002e8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002e8e:	d817      	bhi.n	8002ec0 <UART_SetConfig+0x26c>
 8002e90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e94:	d00b      	beq.n	8002eae <UART_SetConfig+0x25a>
 8002e96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e9a:	d811      	bhi.n	8002ec0 <UART_SetConfig+0x26c>
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <UART_SetConfig+0x254>
 8002ea0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ea4:	d006      	beq.n	8002eb4 <UART_SetConfig+0x260>
 8002ea6:	e00b      	b.n	8002ec0 <UART_SetConfig+0x26c>
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	77fb      	strb	r3, [r7, #31]
 8002eac:	e076      	b.n	8002f9c <UART_SetConfig+0x348>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	77fb      	strb	r3, [r7, #31]
 8002eb2:	e073      	b.n	8002f9c <UART_SetConfig+0x348>
 8002eb4:	2304      	movs	r3, #4
 8002eb6:	77fb      	strb	r3, [r7, #31]
 8002eb8:	e070      	b.n	8002f9c <UART_SetConfig+0x348>
 8002eba:	2308      	movs	r3, #8
 8002ebc:	77fb      	strb	r3, [r7, #31]
 8002ebe:	e06d      	b.n	8002f9c <UART_SetConfig+0x348>
 8002ec0:	2310      	movs	r3, #16
 8002ec2:	77fb      	strb	r3, [r7, #31]
 8002ec4:	e06a      	b.n	8002f9c <UART_SetConfig+0x348>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a1b      	ldr	r2, [pc, #108]	@ (8002f38 <UART_SetConfig+0x2e4>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d138      	bne.n	8002f42 <UART_SetConfig+0x2ee>
 8002ed0:	4b13      	ldr	r3, [pc, #76]	@ (8002f20 <UART_SetConfig+0x2cc>)
 8002ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002eda:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002ede:	d017      	beq.n	8002f10 <UART_SetConfig+0x2bc>
 8002ee0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002ee4:	d82a      	bhi.n	8002f3c <UART_SetConfig+0x2e8>
 8002ee6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002eea:	d00b      	beq.n	8002f04 <UART_SetConfig+0x2b0>
 8002eec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ef0:	d824      	bhi.n	8002f3c <UART_SetConfig+0x2e8>
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <UART_SetConfig+0x2aa>
 8002ef6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002efa:	d006      	beq.n	8002f0a <UART_SetConfig+0x2b6>
 8002efc:	e01e      	b.n	8002f3c <UART_SetConfig+0x2e8>
 8002efe:	2300      	movs	r3, #0
 8002f00:	77fb      	strb	r3, [r7, #31]
 8002f02:	e04b      	b.n	8002f9c <UART_SetConfig+0x348>
 8002f04:	2302      	movs	r3, #2
 8002f06:	77fb      	strb	r3, [r7, #31]
 8002f08:	e048      	b.n	8002f9c <UART_SetConfig+0x348>
 8002f0a:	2304      	movs	r3, #4
 8002f0c:	77fb      	strb	r3, [r7, #31]
 8002f0e:	e045      	b.n	8002f9c <UART_SetConfig+0x348>
 8002f10:	2308      	movs	r3, #8
 8002f12:	77fb      	strb	r3, [r7, #31]
 8002f14:	e042      	b.n	8002f9c <UART_SetConfig+0x348>
 8002f16:	bf00      	nop
 8002f18:	efff69f3 	.word	0xefff69f3
 8002f1c:	40011000 	.word	0x40011000
 8002f20:	40023800 	.word	0x40023800
 8002f24:	40004400 	.word	0x40004400
 8002f28:	40004800 	.word	0x40004800
 8002f2c:	40004c00 	.word	0x40004c00
 8002f30:	40005000 	.word	0x40005000
 8002f34:	40011400 	.word	0x40011400
 8002f38:	40007800 	.word	0x40007800
 8002f3c:	2310      	movs	r3, #16
 8002f3e:	77fb      	strb	r3, [r7, #31]
 8002f40:	e02c      	b.n	8002f9c <UART_SetConfig+0x348>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a72      	ldr	r2, [pc, #456]	@ (8003110 <UART_SetConfig+0x4bc>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d125      	bne.n	8002f98 <UART_SetConfig+0x344>
 8002f4c:	4b71      	ldr	r3, [pc, #452]	@ (8003114 <UART_SetConfig+0x4c0>)
 8002f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f52:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002f56:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002f5a:	d017      	beq.n	8002f8c <UART_SetConfig+0x338>
 8002f5c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002f60:	d817      	bhi.n	8002f92 <UART_SetConfig+0x33e>
 8002f62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f66:	d00b      	beq.n	8002f80 <UART_SetConfig+0x32c>
 8002f68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f6c:	d811      	bhi.n	8002f92 <UART_SetConfig+0x33e>
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <UART_SetConfig+0x326>
 8002f72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f76:	d006      	beq.n	8002f86 <UART_SetConfig+0x332>
 8002f78:	e00b      	b.n	8002f92 <UART_SetConfig+0x33e>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	77fb      	strb	r3, [r7, #31]
 8002f7e:	e00d      	b.n	8002f9c <UART_SetConfig+0x348>
 8002f80:	2302      	movs	r3, #2
 8002f82:	77fb      	strb	r3, [r7, #31]
 8002f84:	e00a      	b.n	8002f9c <UART_SetConfig+0x348>
 8002f86:	2304      	movs	r3, #4
 8002f88:	77fb      	strb	r3, [r7, #31]
 8002f8a:	e007      	b.n	8002f9c <UART_SetConfig+0x348>
 8002f8c:	2308      	movs	r3, #8
 8002f8e:	77fb      	strb	r3, [r7, #31]
 8002f90:	e004      	b.n	8002f9c <UART_SetConfig+0x348>
 8002f92:	2310      	movs	r3, #16
 8002f94:	77fb      	strb	r3, [r7, #31]
 8002f96:	e001      	b.n	8002f9c <UART_SetConfig+0x348>
 8002f98:	2310      	movs	r3, #16
 8002f9a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fa4:	d15b      	bne.n	800305e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002fa6:	7ffb      	ldrb	r3, [r7, #31]
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d828      	bhi.n	8002ffe <UART_SetConfig+0x3aa>
 8002fac:	a201      	add	r2, pc, #4	@ (adr r2, 8002fb4 <UART_SetConfig+0x360>)
 8002fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb2:	bf00      	nop
 8002fb4:	08002fd9 	.word	0x08002fd9
 8002fb8:	08002fe1 	.word	0x08002fe1
 8002fbc:	08002fe9 	.word	0x08002fe9
 8002fc0:	08002fff 	.word	0x08002fff
 8002fc4:	08002fef 	.word	0x08002fef
 8002fc8:	08002fff 	.word	0x08002fff
 8002fcc:	08002fff 	.word	0x08002fff
 8002fd0:	08002fff 	.word	0x08002fff
 8002fd4:	08002ff7 	.word	0x08002ff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fd8:	f7fe fe4e 	bl	8001c78 <HAL_RCC_GetPCLK1Freq>
 8002fdc:	61b8      	str	r0, [r7, #24]
        break;
 8002fde:	e013      	b.n	8003008 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fe0:	f7fe fe5e 	bl	8001ca0 <HAL_RCC_GetPCLK2Freq>
 8002fe4:	61b8      	str	r0, [r7, #24]
        break;
 8002fe6:	e00f      	b.n	8003008 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fe8:	4b4b      	ldr	r3, [pc, #300]	@ (8003118 <UART_SetConfig+0x4c4>)
 8002fea:	61bb      	str	r3, [r7, #24]
        break;
 8002fec:	e00c      	b.n	8003008 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fee:	f7fe fd71 	bl	8001ad4 <HAL_RCC_GetSysClockFreq>
 8002ff2:	61b8      	str	r0, [r7, #24]
        break;
 8002ff4:	e008      	b.n	8003008 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ff6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ffa:	61bb      	str	r3, [r7, #24]
        break;
 8002ffc:	e004      	b.n	8003008 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	77bb      	strb	r3, [r7, #30]
        break;
 8003006:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d074      	beq.n	80030f8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	005a      	lsls	r2, r3, #1
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	085b      	lsrs	r3, r3, #1
 8003018:	441a      	add	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003022:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	2b0f      	cmp	r3, #15
 8003028:	d916      	bls.n	8003058 <UART_SetConfig+0x404>
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003030:	d212      	bcs.n	8003058 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	b29b      	uxth	r3, r3
 8003036:	f023 030f 	bic.w	r3, r3, #15
 800303a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	085b      	lsrs	r3, r3, #1
 8003040:	b29b      	uxth	r3, r3
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	b29a      	uxth	r2, r3
 8003048:	89fb      	ldrh	r3, [r7, #14]
 800304a:	4313      	orrs	r3, r2
 800304c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	89fa      	ldrh	r2, [r7, #14]
 8003054:	60da      	str	r2, [r3, #12]
 8003056:	e04f      	b.n	80030f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	77bb      	strb	r3, [r7, #30]
 800305c:	e04c      	b.n	80030f8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800305e:	7ffb      	ldrb	r3, [r7, #31]
 8003060:	2b08      	cmp	r3, #8
 8003062:	d828      	bhi.n	80030b6 <UART_SetConfig+0x462>
 8003064:	a201      	add	r2, pc, #4	@ (adr r2, 800306c <UART_SetConfig+0x418>)
 8003066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306a:	bf00      	nop
 800306c:	08003091 	.word	0x08003091
 8003070:	08003099 	.word	0x08003099
 8003074:	080030a1 	.word	0x080030a1
 8003078:	080030b7 	.word	0x080030b7
 800307c:	080030a7 	.word	0x080030a7
 8003080:	080030b7 	.word	0x080030b7
 8003084:	080030b7 	.word	0x080030b7
 8003088:	080030b7 	.word	0x080030b7
 800308c:	080030af 	.word	0x080030af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003090:	f7fe fdf2 	bl	8001c78 <HAL_RCC_GetPCLK1Freq>
 8003094:	61b8      	str	r0, [r7, #24]
        break;
 8003096:	e013      	b.n	80030c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003098:	f7fe fe02 	bl	8001ca0 <HAL_RCC_GetPCLK2Freq>
 800309c:	61b8      	str	r0, [r7, #24]
        break;
 800309e:	e00f      	b.n	80030c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003118 <UART_SetConfig+0x4c4>)
 80030a2:	61bb      	str	r3, [r7, #24]
        break;
 80030a4:	e00c      	b.n	80030c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030a6:	f7fe fd15 	bl	8001ad4 <HAL_RCC_GetSysClockFreq>
 80030aa:	61b8      	str	r0, [r7, #24]
        break;
 80030ac:	e008      	b.n	80030c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030b2:	61bb      	str	r3, [r7, #24]
        break;
 80030b4:	e004      	b.n	80030c0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	77bb      	strb	r3, [r7, #30]
        break;
 80030be:	bf00      	nop
    }

    if (pclk != 0U)
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d018      	beq.n	80030f8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	085a      	lsrs	r2, r3, #1
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	441a      	add	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	2b0f      	cmp	r3, #15
 80030de:	d909      	bls.n	80030f4 <UART_SetConfig+0x4a0>
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030e6:	d205      	bcs.n	80030f4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	60da      	str	r2, [r3, #12]
 80030f2:	e001      	b.n	80030f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003104:	7fbb      	ldrb	r3, [r7, #30]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3720      	adds	r7, #32
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40007c00 	.word	0x40007c00
 8003114:	40023800 	.word	0x40023800
 8003118:	00f42400 	.word	0x00f42400

0800311c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00a      	beq.n	8003146 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00a      	beq.n	8003168 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00a      	beq.n	800318a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b0:	f003 0310 	and.w	r3, r3, #16
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d2:	f003 0320 	and.w	r3, r3, #32
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00a      	beq.n	80031f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d01a      	beq.n	8003232 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003216:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800321a:	d10a      	bne.n	8003232 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	605a      	str	r2, [r3, #4]
  }
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08c      	sub	sp, #48	@ 0x30
 8003264:	af02      	add	r7, sp, #8
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003270:	f7fd fcf4 	bl	8000c5c <HAL_GetTick>
 8003274:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b08      	cmp	r3, #8
 8003282:	d12e      	bne.n	80032e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003284:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328c:	2200      	movs	r2, #0
 800328e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f83b 	bl	800330e <UART_WaitOnFlagUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d021      	beq.n	80032e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	e853 3f00 	ldrex	r3, [r3]
 80032aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032b2:	623b      	str	r3, [r7, #32]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	461a      	mov	r2, r3
 80032ba:	6a3b      	ldr	r3, [r7, #32]
 80032bc:	61fb      	str	r3, [r7, #28]
 80032be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c0:	69b9      	ldr	r1, [r7, #24]
 80032c2:	69fa      	ldr	r2, [r7, #28]
 80032c4:	e841 2300 	strex	r3, r2, [r1]
 80032c8:	617b      	str	r3, [r7, #20]
   return(result);
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1e6      	bne.n	800329e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2220      	movs	r2, #32
 80032d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e011      	b.n	8003306 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2220      	movs	r2, #32
 80032e6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3728      	adds	r7, #40	@ 0x28
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b084      	sub	sp, #16
 8003312:	af00      	add	r7, sp, #0
 8003314:	60f8      	str	r0, [r7, #12]
 8003316:	60b9      	str	r1, [r7, #8]
 8003318:	603b      	str	r3, [r7, #0]
 800331a:	4613      	mov	r3, r2
 800331c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800331e:	e04f      	b.n	80033c0 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003326:	d04b      	beq.n	80033c0 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003328:	f7fd fc98 	bl	8000c5c <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	429a      	cmp	r2, r3
 8003336:	d302      	bcc.n	800333e <UART_WaitOnFlagUntilTimeout+0x30>
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e04e      	b.n	80033e0 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	d037      	beq.n	80033c0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2b80      	cmp	r3, #128	@ 0x80
 8003354:	d034      	beq.n	80033c0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2b40      	cmp	r3, #64	@ 0x40
 800335a:	d031      	beq.n	80033c0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b08      	cmp	r3, #8
 8003368:	d110      	bne.n	800338c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2208      	movs	r2, #8
 8003370:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 f8fe 	bl	8003574 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2208      	movs	r2, #8
 800337c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e029      	b.n	80033e0 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003396:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800339a:	d111      	bne.n	80033c0 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033a4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 f8e4 	bl	8003574 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e00f      	b.n	80033e0 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	69da      	ldr	r2, [r3, #28]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	4013      	ands	r3, r2
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	bf0c      	ite	eq
 80033d0:	2301      	moveq	r3, #1
 80033d2:	2300      	movne	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	461a      	mov	r2, r3
 80033d8:	79fb      	ldrb	r3, [r7, #7]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d0a0      	beq.n	8003320 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b097      	sub	sp, #92	@ 0x5c
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	4613      	mov	r3, r2
 80033f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	88fa      	ldrh	r2, [r7, #6]
 8003400:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	88fa      	ldrh	r2, [r7, #6]
 8003408:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800341a:	d10e      	bne.n	800343a <UART_Start_Receive_IT+0x52>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d105      	bne.n	8003430 <UART_Start_Receive_IT+0x48>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800342a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800342e:	e02d      	b.n	800348c <UART_Start_Receive_IT+0xa4>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	22ff      	movs	r2, #255	@ 0xff
 8003434:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003438:	e028      	b.n	800348c <UART_Start_Receive_IT+0xa4>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10d      	bne.n	800345e <UART_Start_Receive_IT+0x76>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d104      	bne.n	8003454 <UART_Start_Receive_IT+0x6c>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	22ff      	movs	r2, #255	@ 0xff
 800344e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003452:	e01b      	b.n	800348c <UART_Start_Receive_IT+0xa4>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	227f      	movs	r2, #127	@ 0x7f
 8003458:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800345c:	e016      	b.n	800348c <UART_Start_Receive_IT+0xa4>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003466:	d10d      	bne.n	8003484 <UART_Start_Receive_IT+0x9c>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d104      	bne.n	800347a <UART_Start_Receive_IT+0x92>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	227f      	movs	r2, #127	@ 0x7f
 8003474:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003478:	e008      	b.n	800348c <UART_Start_Receive_IT+0xa4>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	223f      	movs	r2, #63	@ 0x3f
 800347e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003482:	e003      	b.n	800348c <UART_Start_Receive_IT+0xa4>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2222      	movs	r2, #34	@ 0x22
 8003498:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3308      	adds	r3, #8
 80034a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034a6:	e853 3f00 	ldrex	r3, [r3]
 80034aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80034ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	3308      	adds	r3, #8
 80034ba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80034bc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80034be:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80034c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034c4:	e841 2300 	strex	r3, r2, [r1]
 80034c8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80034ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1e5      	bne.n	800349c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034d8:	d107      	bne.n	80034ea <UART_Start_Receive_IT+0x102>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d103      	bne.n	80034ea <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4a21      	ldr	r2, [pc, #132]	@ (800356c <UART_Start_Receive_IT+0x184>)
 80034e6:	669a      	str	r2, [r3, #104]	@ 0x68
 80034e8:	e002      	b.n	80034f0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4a20      	ldr	r2, [pc, #128]	@ (8003570 <UART_Start_Receive_IT+0x188>)
 80034ee:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d019      	beq.n	800352c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003500:	e853 3f00 	ldrex	r3, [r3]
 8003504:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003508:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800350c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003516:	637b      	str	r3, [r7, #52]	@ 0x34
 8003518:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800351c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800351e:	e841 2300 	strex	r3, r2, [r1]
 8003522:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1e6      	bne.n	80034f8 <UART_Start_Receive_IT+0x110>
 800352a:	e018      	b.n	800355e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	e853 3f00 	ldrex	r3, [r3]
 8003538:	613b      	str	r3, [r7, #16]
   return(result);
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	f043 0320 	orr.w	r3, r3, #32
 8003540:	653b      	str	r3, [r7, #80]	@ 0x50
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	461a      	mov	r2, r3
 8003548:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800354a:	623b      	str	r3, [r7, #32]
 800354c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354e:	69f9      	ldr	r1, [r7, #28]
 8003550:	6a3a      	ldr	r2, [r7, #32]
 8003552:	e841 2300 	strex	r3, r2, [r1]
 8003556:	61bb      	str	r3, [r7, #24]
   return(result);
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1e6      	bne.n	800352c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	375c      	adds	r7, #92	@ 0x5c
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	08003865 	.word	0x08003865
 8003570:	080036bd 	.word	0x080036bd

08003574 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003574:	b480      	push	{r7}
 8003576:	b095      	sub	sp, #84	@ 0x54
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003584:	e853 3f00 	ldrex	r3, [r3]
 8003588:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800358a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003590:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800359a:	643b      	str	r3, [r7, #64]	@ 0x40
 800359c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800359e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035a2:	e841 2300 	strex	r3, r2, [r1]
 80035a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1e6      	bne.n	800357c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	3308      	adds	r3, #8
 80035b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	e853 3f00 	ldrex	r3, [r3]
 80035bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	f023 0301 	bic.w	r3, r3, #1
 80035c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	3308      	adds	r3, #8
 80035cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035d6:	e841 2300 	strex	r3, r2, [r1]
 80035da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80035dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1e5      	bne.n	80035ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d118      	bne.n	800361c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	e853 3f00 	ldrex	r3, [r3]
 80035f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	f023 0310 	bic.w	r3, r3, #16
 80035fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	461a      	mov	r2, r3
 8003606:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003608:	61bb      	str	r3, [r7, #24]
 800360a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360c:	6979      	ldr	r1, [r7, #20]
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	e841 2300 	strex	r3, r2, [r1]
 8003614:	613b      	str	r3, [r7, #16]
   return(result);
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1e6      	bne.n	80035ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2220      	movs	r2, #32
 8003620:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003630:	bf00      	nop
 8003632:	3754      	adds	r7, #84	@ 0x54
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003648:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f7ff fae4 	bl	8002c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003660:	bf00      	nop
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b088      	sub	sp, #32
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	e853 3f00 	ldrex	r3, [r3]
 800367c:	60bb      	str	r3, [r7, #8]
   return(result);
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003684:	61fb      	str	r3, [r7, #28]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	461a      	mov	r2, r3
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	61bb      	str	r3, [r7, #24]
 8003690:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003692:	6979      	ldr	r1, [r7, #20]
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	e841 2300 	strex	r3, r2, [r1]
 800369a:	613b      	str	r3, [r7, #16]
   return(result);
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1e6      	bne.n	8003670 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2220      	movs	r2, #32
 80036a6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7ff fab0 	bl	8002c14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036b4:	bf00      	nop
 80036b6:	3720      	adds	r7, #32
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b09c      	sub	sp, #112	@ 0x70
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80036ca:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036d4:	2b22      	cmp	r3, #34	@ 0x22
 80036d6:	f040 80b9 	bne.w	800384c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80036e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80036e8:	b2d9      	uxtb	r1, r3
 80036ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f4:	400a      	ands	r2, r1
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800370a:	b29b      	uxth	r3, r3
 800370c:	3b01      	subs	r3, #1
 800370e:	b29a      	uxth	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	f040 809c 	bne.w	800385c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800372c:	e853 3f00 	ldrex	r3, [r3]
 8003730:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003732:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003734:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003738:	66bb      	str	r3, [r7, #104]	@ 0x68
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003742:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003744:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003746:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003748:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800374a:	e841 2300 	strex	r3, r2, [r1]
 800374e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003750:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1e6      	bne.n	8003724 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	3308      	adds	r3, #8
 800375c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003760:	e853 3f00 	ldrex	r3, [r3]
 8003764:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003768:	f023 0301 	bic.w	r3, r3, #1
 800376c:	667b      	str	r3, [r7, #100]	@ 0x64
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	3308      	adds	r3, #8
 8003774:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003776:	647a      	str	r2, [r7, #68]	@ 0x44
 8003778:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800377c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800377e:	e841 2300 	strex	r3, r2, [r1]
 8003782:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1e5      	bne.n	8003756 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2220      	movs	r2, #32
 800378e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d018      	beq.n	80037de <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b4:	e853 3f00 	ldrex	r3, [r3]
 80037b8:	623b      	str	r3, [r7, #32]
   return(result);
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80037c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80037cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037d2:	e841 2300 	strex	r3, r2, [r1]
 80037d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80037d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1e6      	bne.n	80037ac <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d12e      	bne.n	8003844 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	e853 3f00 	ldrex	r3, [r3]
 80037f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f023 0310 	bic.w	r3, r3, #16
 8003800:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800380a:	61fb      	str	r3, [r7, #28]
 800380c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380e:	69b9      	ldr	r1, [r7, #24]
 8003810:	69fa      	ldr	r2, [r7, #28]
 8003812:	e841 2300 	strex	r3, r2, [r1]
 8003816:	617b      	str	r3, [r7, #20]
   return(result);
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1e6      	bne.n	80037ec <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	f003 0310 	and.w	r3, r3, #16
 8003828:	2b10      	cmp	r3, #16
 800382a:	d103      	bne.n	8003834 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2210      	movs	r2, #16
 8003832:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800383a:	4619      	mov	r1, r3
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f7ff f9fd 	bl	8002c3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003842:	e00b      	b.n	800385c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7fc feb7 	bl	80005b8 <HAL_UART_RxCpltCallback>
}
 800384a:	e007      	b.n	800385c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699a      	ldr	r2, [r3, #24]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0208 	orr.w	r2, r2, #8
 800385a:	619a      	str	r2, [r3, #24]
}
 800385c:	bf00      	nop
 800385e:	3770      	adds	r7, #112	@ 0x70
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b09c      	sub	sp, #112	@ 0x70
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003872:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800387c:	2b22      	cmp	r3, #34	@ 0x22
 800387e:	f040 80b9 	bne.w	80039f4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003888:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003890:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003892:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003896:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800389a:	4013      	ands	r3, r2
 800389c:	b29a      	uxth	r2, r3
 800389e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038a0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a6:	1c9a      	adds	r2, r3, #2
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f040 809c 	bne.w	8003a04 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038d4:	e853 3f00 	ldrex	r3, [r3]
 80038d8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80038da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80038ec:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80038f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80038f2:	e841 2300 	strex	r3, r2, [r1]
 80038f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80038f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1e6      	bne.n	80038cc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3308      	adds	r3, #8
 8003904:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003908:	e853 3f00 	ldrex	r3, [r3]
 800390c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800390e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003910:	f023 0301 	bic.w	r3, r3, #1
 8003914:	663b      	str	r3, [r7, #96]	@ 0x60
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3308      	adds	r3, #8
 800391c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800391e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003920:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003922:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003924:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003926:	e841 2300 	strex	r3, r2, [r1]
 800392a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800392c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1e5      	bne.n	80038fe <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2220      	movs	r2, #32
 8003936:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d018      	beq.n	8003986 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	e853 3f00 	ldrex	r3, [r3]
 8003960:	61fb      	str	r3, [r7, #28]
   return(result);
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003968:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	461a      	mov	r2, r3
 8003970:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003972:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003974:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003976:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003978:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800397a:	e841 2300 	strex	r3, r2, [r1]
 800397e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1e6      	bne.n	8003954 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800398a:	2b01      	cmp	r3, #1
 800398c:	d12e      	bne.n	80039ec <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	e853 3f00 	ldrex	r3, [r3]
 80039a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	f023 0310 	bic.w	r3, r3, #16
 80039a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039b2:	61bb      	str	r3, [r7, #24]
 80039b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b6:	6979      	ldr	r1, [r7, #20]
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	e841 2300 	strex	r3, r2, [r1]
 80039be:	613b      	str	r3, [r7, #16]
   return(result);
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1e6      	bne.n	8003994 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	f003 0310 	and.w	r3, r3, #16
 80039d0:	2b10      	cmp	r3, #16
 80039d2:	d103      	bne.n	80039dc <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2210      	movs	r2, #16
 80039da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80039e2:	4619      	mov	r1, r3
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7ff f929 	bl	8002c3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80039ea:	e00b      	b.n	8003a04 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7fc fde3 	bl	80005b8 <HAL_UART_RxCpltCallback>
}
 80039f2:	e007      	b.n	8003a04 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	699a      	ldr	r2, [r3, #24]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0208 	orr.w	r2, r2, #8
 8003a02:	619a      	str	r2, [r3, #24]
}
 8003a04:	bf00      	nop
 8003a06:	3770      	adds	r7, #112	@ 0x70
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <memset>:
 8003a0c:	4402      	add	r2, r0
 8003a0e:	4603      	mov	r3, r0
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d100      	bne.n	8003a16 <memset+0xa>
 8003a14:	4770      	bx	lr
 8003a16:	f803 1b01 	strb.w	r1, [r3], #1
 8003a1a:	e7f9      	b.n	8003a10 <memset+0x4>

08003a1c <__libc_init_array>:
 8003a1c:	b570      	push	{r4, r5, r6, lr}
 8003a1e:	4d0d      	ldr	r5, [pc, #52]	@ (8003a54 <__libc_init_array+0x38>)
 8003a20:	4c0d      	ldr	r4, [pc, #52]	@ (8003a58 <__libc_init_array+0x3c>)
 8003a22:	1b64      	subs	r4, r4, r5
 8003a24:	10a4      	asrs	r4, r4, #2
 8003a26:	2600      	movs	r6, #0
 8003a28:	42a6      	cmp	r6, r4
 8003a2a:	d109      	bne.n	8003a40 <__libc_init_array+0x24>
 8003a2c:	4d0b      	ldr	r5, [pc, #44]	@ (8003a5c <__libc_init_array+0x40>)
 8003a2e:	4c0c      	ldr	r4, [pc, #48]	@ (8003a60 <__libc_init_array+0x44>)
 8003a30:	f000 f818 	bl	8003a64 <_init>
 8003a34:	1b64      	subs	r4, r4, r5
 8003a36:	10a4      	asrs	r4, r4, #2
 8003a38:	2600      	movs	r6, #0
 8003a3a:	42a6      	cmp	r6, r4
 8003a3c:	d105      	bne.n	8003a4a <__libc_init_array+0x2e>
 8003a3e:	bd70      	pop	{r4, r5, r6, pc}
 8003a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a44:	4798      	blx	r3
 8003a46:	3601      	adds	r6, #1
 8003a48:	e7ee      	b.n	8003a28 <__libc_init_array+0xc>
 8003a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a4e:	4798      	blx	r3
 8003a50:	3601      	adds	r6, #1
 8003a52:	e7f2      	b.n	8003a3a <__libc_init_array+0x1e>
 8003a54:	08003a9c 	.word	0x08003a9c
 8003a58:	08003a9c 	.word	0x08003a9c
 8003a5c:	08003a9c 	.word	0x08003a9c
 8003a60:	08003aa0 	.word	0x08003aa0

08003a64 <_init>:
 8003a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a66:	bf00      	nop
 8003a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a6a:	bc08      	pop	{r3}
 8003a6c:	469e      	mov	lr, r3
 8003a6e:	4770      	bx	lr

08003a70 <_fini>:
 8003a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a72:	bf00      	nop
 8003a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a76:	bc08      	pop	{r3}
 8003a78:	469e      	mov	lr, r3
 8003a7a:	4770      	bx	lr
